<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>힘내서 공부해보자</title>
  
  <subtitle>죽기직전까지</subtitle>
  <link href="/feed.xml" rel="self"/>
  
  <link href="https://shldhee.github.io/"/>
  <updated>2020-07-23T08:31:33.045Z</updated>
  <id>https://shldhee.github.io/</id>
  
  <author>
    <name>ddoka</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>petsbab를 만들어봤습니다! - 반려동물 사료 직거래 플랫폼</title>
    <link href="https://shldhee.github.io/2020/05/01/petsbab/"/>
    <id>https://shldhee.github.io/2020/05/01/petsbab/</id>
    <published>2020-04-30T16:15:52.000Z</published>
    <updated>2020-07-23T08:31:33.045Z</updated>
    
    <content type="html"><![CDATA[<h1 id="펫츠밥이란"><a href="#펫츠밥이란" class="headerlink" title="펫츠밥이란?"></a>펫츠밥이란?</h1><ul><li>루비콘에서 사이드프로젝트 인원을 모집하여 매칭까지 해주고!! 멘토님과 함께 사이드 프로젝트를 완성한 상용화 서비스입니다!</li><li>돈을 벌기 위한 목적보다는 비영리 목적으로 만들었습니다. 펫츠밥을 통해 프로젝트 완성하는법을 배웠습니다.</li></ul><h2 id="아래는-홍보용-스크립트입니다"><a href="#아래는-홍보용-스크립트입니다" class="headerlink" title="아래는 홍보용 스크립트입니다!"></a>아래는 홍보용 스크립트입니다!</h2><h3 id="제목-반려동물의-밥이-고민일-땐-펫츠밥"><a href="#제목-반려동물의-밥이-고민일-땐-펫츠밥" class="headerlink" title="제목: 반려동물의 밥이 고민일 땐, 펫츠밥!"></a>제목: 반려동물의 밥이 고민일 땐, 펫츠밥!</h3><p><img src="https://images.velog.io/images/muchogusto/post/99aab8e7-ca79-400e-81c2-ffebe26167e0/%E1%84%89%E1%85%B5%E1%84%86%E1%85%AE%E1%84%85%E1%85%B3%E1%86%A8%E1%84%86%E1%85%A5%E1%86%BC.gif" alt></p><h3 id="매일-무슨-밥-먹을-지-고민하시죠"><a href="#매일-무슨-밥-먹을-지-고민하시죠" class="headerlink" title="매일 무슨 밥 먹을 지 고민하시죠?"></a>매일 무슨 밥 먹을 지 고민하시죠?</h3><h3 id="그-런-데"><a href="#그-런-데" class="headerlink" title="그!런!데!"></a>그!런!데!</h3><p>반려동물은 1년 365일 삼시세끼 같은 밥만 먹인다고요?! 👀<br><img src="https://images.velog.io/images/muchogusto/post/598c994a-3dd3-4816-a658-67cbb63ecf17/%E1%84%8B%E1%85%A3%E1%84%8B%E1%85%A9%E1%86%BC.gif" alt></p><h3 id="반려동물에게-선택의-자유를-주세요"><a href="#반려동물에게-선택의-자유를-주세요" class="headerlink" title="반려동물에게 선택의 자유를 주세요..!"></a>반려동물에게 선택의 자유를 주세요..!</h3><p><img src="https://images.velog.io/images/muchogusto/post/7206481c-4a56-440b-aa7b-6afbe9b2bcb7/KakaoTalk_20200429_213721016.gif" alt></p><h3 id="Hoxy"><a href="#Hoxy" class="headerlink" title="Hoxy..!"></a>Hoxy..!</h3><p>맛보고 구매하고 싶은데 그럴 수는 없고, 큰 용량의 사료가 고민이신가요? 😔<br>다양한 사료를 딱 원하는 만큼만!  구매해서 맛보세요! 😀</p><p><img src="https://images.velog.io/images/muchogusto/post/e4b8c5fe-b8b2-4bad-9eeb-57b8c5c9dd69/KakaoTalk_20200429_213451460.gif" alt></p><h3 id="Hoxy-1"><a href="#Hoxy-1" class="headerlink" title="Hoxy..!"></a>Hoxy..!</h3><p>사료를 대량으로 구매했는데 반려동물이 잘 먹지 않아서 고민이신가요? 😔<br>사료를 종이컵에 담아 판매해보세요! 😀<br><img src="https://images.velog.io/images/muchogusto/post/8f7d01e6-fb16-4676-8448-f7e9a4812767/KakaoTalk_20200429_213344555.gif" alt></p><h3 id="바쁜-반려인들의-시간과-비용을-아끼는-슬기로운-반려생활과"><a href="#바쁜-반려인들의-시간과-비용을-아끼는-슬기로운-반려생활과" class="headerlink" title="바쁜 반려인들의 시간과 비용을 아끼는, 슬기로운 반려생활과"></a>바쁜 반려인들의 시간과 비용을 아끼는, 슬기로운 반려생활과</h3><h3 id="반려동물의-밥취향을-‘펫츠밥’이-응원합니다-💪🏻"><a href="#반려동물의-밥취향을-‘펫츠밥’이-응원합니다-💪🏻" class="headerlink" title="반려동물의 밥취향을 ‘펫츠밥’이 응원합니다! 💪🏻"></a>반려동물의 밥취향을 ‘펫츠밥’이 응원합니다! 💪🏻</h3><p><img src="https://images.velog.io/images/muchogusto/post/99c566ce-4912-4fe2-83f0-02c6496520b7/KakaoTalk_20200429_213853805.gif" alt></p><h3 id="🍚반려동물의-밥-BAB"><a href="#🍚반려동물의-밥-BAB" class="headerlink" title="🍚반려동물의 밥! BAB!"></a>🍚반려동물의 밥! BAB!</h3><p>펫푸드 직거래 플랫폼 PetsBab으로 오세요! 🙌🏻<br><a href="http://www.petsbab.com" rel="external nofollow noopener noreferrer" target="_blank">www.petsbab.com</a><br><img src="https://images.velog.io/images/muchogusto/post/518ef1a3-de79-4e98-9782-9bd9015c23a3/KakaoTalk_20200429_213608858.gif" alt></p><p>#펫츠밥#petsbab<br>#사료#사료공유#사료직거래<br>#종이컵사료<br>#종이컵직거래<br>#사료직거래<br>#동네직거래<br>#반려동물</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;펫츠밥이란&quot;&gt;&lt;a href=&quot;#펫츠밥이란&quot; class=&quot;headerlink&quot; title=&quot;펫츠밥이란?&quot;&gt;&lt;/a&gt;펫츠밥이란?&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;루비콘에서 사이드프로젝트 인원을 모집하여 매칭까지 해주고!! 멘토님과 함께 사이드 프로젝트
      
    
    </summary>
    
      <category term="petsbab" scheme="https://shldhee.github.io/categories/petsbab/"/>
    
    
      <category term="Javascript" scheme="https://shldhee.github.io/tags/Javascript/"/>
    
      <category term="Vue" scheme="https://shldhee.github.io/tags/Vue/"/>
    
      <category term="Blog" scheme="https://shldhee.github.io/tags/Blog/"/>
    
      <category term="Introduce" scheme="https://shldhee.github.io/tags/Introduce/"/>
    
  </entry>
  
  <entry>
    <title>javascript-native</title>
    <link href="https://shldhee.github.io/2019/04/17/javascript-native/"/>
    <id>https://shldhee.github.io/2019/04/17/javascript-native/</id>
    <published>2019-04-16T15:23:17.000Z</published>
    <updated>2020-07-23T08:31:33.045Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-Javascript-native"><a href="#1-Javascript-native" class="headerlink" title="1. Javascript - native"></a>1. Javascript - native</h1><ul><li><p><code>native(네이티브)</code>란 사실 내장 함수이다.</p></li><li><p><code>String()</code></p></li><li><p><code>Number()</code></p></li><li><p><code>Boolean()</code></p></li><li><p><code>Array()</code></p></li><li><p><code>Object()</code></p></li><li><p><code>Function()</code></p></li><li><p><code>RegExp()</code></p></li><li><p><code>Date()</code></p></li><li><p><code>Error()</code></p></li><li><p><code>Symbol()</code></p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> <span class="built_in">String</span>(<span class="string">"abc"</span>);</span><br><span class="line"><span class="keyword">typeof</span> a; <span class="comment">// "object" ... "String"이 아니다.</span></span><br><span class="line">a <span class="keyword">instanceof</span> <span class="built_in">String</span>; <span class="comment">// true</span></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call(a); <span class="comment">// "[object String]"</span></span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// String &#123;"abc"&#125; chrome</span></span><br></pre></td></tr></table></figure><ul><li><code>(new String(&quot;abc&quot;))</code> 생성자의 결과는 원시 값 “abc”를 감싼 <strong>객체 래퍼</strong>다.</li><li><code>object</code>하위 타입에 가깝다.</li><li><strong><code>new String(&quot;abc&quot;)</code>은 “abc”를 감싸는 문자열 래퍼를 생성하며 원시 값 “abc”는 아니라는 점</strong></li></ul><h2 id="1-1-내부-Class"><a href="#1-1-내부-Class" class="headerlink" title="1.1 내부 [[Class]]"></a>1.1 내부 [[Class]]</h2><ul><li><code>typeof</code>가 <code>&quot;object&quot;</code>인 값에는 <code>[[Class]]</code>라는 내부 프로퍼티가 추가로 붙는다.</li><li>이 프로퍼티는 직접 접근할 수 없고 <code>Object.prototype.toString()</code>이라는 메서드에 값을 넣어 호출함으로써 존재를 엿 볼 수 있다.</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.prototype.toString.call([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]);</span><br><span class="line"><span class="comment">// "[object array]"</span></span><br><span class="line"><span class="built_in">Object</span>.prototype.tostring.call(<span class="regexp">/regex-literal/i</span>);</span><br><span class="line"><span class="comment">// "[object RegExp]"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 원시값은?? 원시값 내부에도 [[Class]] 존재</span></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call(<span class="literal">null</span>);</span><br><span class="line"><span class="comment">// "[object Null]"</span></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call(<span class="literal">undefined</span>);</span><br><span class="line"><span class="comment">// "[object Undefined]"</span></span><br></pre></td></tr></table></figure><ul><li><code>Null</code>, <code>undedefined</code>는 네이티브 생성자가 없지만 내부 <code>[[Class]]</code> 값을 확인해보니 <code>Null, Undefined</code>다.</li><li>그 밖에 다른 원시 값들도 같은 결과는 낸다. 바로 객체 레퍼로 자동<code>박싱(Boxing)</code>이다.</li></ul><h2 id="1-2-래퍼-박싱하기"><a href="#1-2-래퍼-박싱하기" class="headerlink" title="1.2 래퍼 박싱하기"></a>1.2 래퍼 박싱하기</h2><ul><li>원시 값엔 프로퍼티나 메서드가 없으므로 <code>.length, .toString()</code>으로 접근하려면 원시 값을 객체 래퍼로 감싸줘야 한다. 하지만 자바스크립트는 원시 값을 알아서 박싱해준다.</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="string">"abc"</span>;</span><br><span class="line">a.length; <span class="comment">// 3;</span></span><br><span class="line">a.toUpperCase(); <span class="comment">// "ABC"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 예) i &lt; a.length;</span></span><br></pre></td></tr></table></figure><h3 id="1-2-1-객체-래퍼의-함정"><a href="#1-2-1-객체-래퍼의-함정" class="headerlink" title="1.2.1 객체 래퍼의 함정"></a>1.2.1 객체 래퍼의 함정</h3><ul><li><code>Boolean</code>으로 래핑한 경우 주의해야 한다.</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> <span class="built_in">Boolean</span>(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!a) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"OOPS!!"</span>); <span class="comment">// 실행되지 않는다.</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>false</code>를 객체 래퍼로 감쌌지만 문제는 객체가 <code>truthy</code>한 점이다. 따라서 조건문에서는 <code>false</code>이므로 실행되지 않는다.</li><li>수동으로 원시 값을 박승하려면 <code>Object()</code>함수를 이용하자(앞에 <code>new</code>키워드가 없다.)</li><li>객체 래퍼로 직접 박싱하는건 권하고 싶지 않다.</li></ul><h2 id="1-3-언박싱"><a href="#1-3-언박싱" class="headerlink" title="1.3 언박싱"></a>1.3 언박싱</h2><ul><li>객체 래퍼의 원시 값은 <code>valueOf()</code> 메서드로 추출한다.</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> <span class="built_in">String</span>(<span class="string">'abc'</span>);</span><br><span class="line"><span class="keyword">var</span> b = <span class="keyword">new</span> <span class="built_in">Number</span>(<span class="number">42</span>);</span><br><span class="line"><span class="keyword">var</span> c = <span class="keyword">new</span> <span class="built_in">Boolean</span>(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">a.valueOf(); <span class="comment">// "abc"</span></span><br><span class="line">b.valueOf(); <span class="comment">// 42</span></span><br><span class="line">c.valueOf(); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 이떄도 언박싱이 일어난다.</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> <span class="built_in">String</span>(<span class="string">"abc"</span>);</span><br><span class="line"><span class="keyword">var</span> b = a + <span class="string">""</span>; <span class="comment">// 'b'에는 언박싱된 "abc"가 대입</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typeof</span> a; <span class="comment">// "object"</span></span><br><span class="line"><span class="keyword">typeof</span> b; <span class="comment">// "string"</span></span><br></pre></td></tr></table></figure><h2 id="1-4-네이티브-나는-생성자다"><a href="#1-4-네이티브-나는-생성자다" class="headerlink" title="1.4 네이티브, 나는 생성자다."></a>1.4 네이티브, 나는 생성자다.</h2><ul><li>생성자보단 리터럴 형태로 생성하자.</li></ul><h3 id="1-4-1-Array"><a href="#1-4-1-Array" class="headerlink" title="1.4.1 Array()"></a>1.4.1 Array()</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>);</span><br><span class="line">a; <span class="comment">// [1,2,3]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> b = <span class="built_in">Array</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>);</span><br><span class="line">b; <span class="comment">// [1,2,3]</span></span><br></pre></td></tr></table></figure><ul><li><code>new</code>가 있고 없고 차이는 없다. 둘은 결과적으로 같다.</li><li><code>Array()</code> 인자를 하나면 받으면 <code>length</code>가 적용되어 크기가 된다.</li><li>빈배열을 만들고 나중에 <code>length</code>프로퍼티에 숫자 값을 할당하는게 맞는데 자바스크립트는 혼란스러운 구조로 되어있다.</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">a.length; <span class="comment">// 3</span></span><br><span class="line">a;  <span class="comment">// (3) [empty × 3] 윈도우 크롬</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">3</span>);</span><br><span class="line"><span class="keyword">var</span> b = [ <span class="literal">undefined</span>, <span class="literal">undefined</span>, <span class="literal">undefined</span> ];</span><br><span class="line"><span class="keyword">var</span> c = [];</span><br><span class="line">c.length = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">a; <span class="comment">// (3) [empty × 3]</span></span><br><span class="line">b; <span class="comment">// (3) [undefined, undefined, undefined]</span></span><br><span class="line">c; <span class="comment">// (3) [empty × 3]</span></span><br></pre></td></tr></table></figure><h3 id="1-4-2-Object-Function-and-RegExp"><a href="#1-4-2-Object-Function-and-RegExp" class="headerlink" title="1.4.2 Object(), Function(), and RegExp()"></a>1.4.2 Object(), Function(), and RegExp()</h3><ul><li>정말 특별하지 않은 이상 생성자 대신 <strong>리터럴</strong>로 모두 사용하자.</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> c = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">c.foo = <span class="string">"bar"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> d = &#123; <span class="attr">foo</span>: <span class="string">"bar"</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> e = <span class="keyword">new</span> <span class="built_in">Function</span>(<span class="string">"a"</span>, <span class="string">"return a * 2;"</span>);</span><br><span class="line"><span class="keyword">var</span> f = <span class="function"><span class="keyword">function</span>(<span class="params">a</span>) </span>&#123; <span class="keyword">return</span> a * <span class="number">2</span> &#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">g</span>(<span class="params">a</span>) </span>&#123; <span class="keyword">return</span> a * <span class="number">2</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> h = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">"^a*b+"</span>,<span class="string">"g"</span>);</span><br><span class="line"><span class="keyword">var</span> i  = <span class="regexp">/^a*b+/g</span>;</span><br></pre></td></tr></table></figure><h3 id="1-4-3-Date-Error"><a href="#1-4-3-Date-Error" class="headerlink" title="1.4.3 Date(), Error()"></a>1.4.3 Date(), Error()</h3><ul><li><code>Date(), Error()</code>는 리터럴이 없으므로 네이티브, 생성자 함수로 사용해야 한다.</li><li><code>new Date()</code>로 유닉스 타임스탬프 값을 얻는 용도로 사용 <code>getTime()</code></li><li>ES5부터는 <code>Date.now()</code>를 사용하는게 더 쉽다.</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!<span class="built_in">Date</span>.now) &#123;</span><br><span class="line">  <span class="built_in">Date</span>.now = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">new</span> <span class="built_in">Date</span>().getTime());</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>error</code>객체의 주 용도는 현재의 실행 스택 콘텍스트를 포착하여 객체에 담는 것</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!x) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"x를 안줬다"</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>Error</code> 객체 인스턴스에는 적어도 <code>message</code> 프로퍼티가 있고 <code>type</code>등이 포함되어 있을 때도 있다.</li><li>사람들이 보기 쉽게 하려면 <code>.stack</code>프로퍼티 대신 <code>error</code>객체의 <code>toString()</code>를 호출하는 것이 좋다.</li></ul><h3 id="1-4-4-Symbol"><a href="#1-4-4-Symbol" class="headerlink" title="1.4.4 Symbol()"></a>1.4.4 Symbol()</h3><ul><li>ES6에서 처음 선보인, 새로운 원시 값 타입니다.</li><li>심볼은 충돌 염려 없이 객체 프로퍼티로 사용 가능한, 특별한 <code>유일 값</code>이다.</li><li>프로퍼티명으로 사용 가능하다 코드나 콘솔에서 실제 값을 보거나 접근은 불가능하다.</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">obj[<span class="built_in">Symbol</span>.iterator] = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="comment">/* ... */</span> &#125;;</span><br></pre></td></tr></table></figure><ul><li>심볼을 정의하려면 <code>Symbol()</code> 네이티브를 사용 <code>new</code>를 붙이면 에러가 난다!</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mysym = <span class="built_in">Symbol</span>(<span class="string">"my own symbol"</span>);</span><br><span class="line">mysym; <span class="comment">// Symbol(my own symbol)</span></span><br><span class="line">mysym.toString(); <span class="comment">// "Symbol(my own symbol)"</span></span><br><span class="line"><span class="keyword">typeof</span> mysym; <span class="comment">// "symbol"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = &#123;&#125;;</span><br><span class="line">a[mysym] = <span class="string">"footer"</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.getOwnPropertySymbols(a); <span class="comment">// [Symbol(my own symbol)]</span></span><br></pre></td></tr></table></figure><ul><li>전용 혹은 특별한 프로퍼티에 사용될 수 있으며, 개발자가 <code>전용/특수/내부 프로퍼티입니다.</code>라고 하면서 <code>_</code>가 붙은 프로퍼티명도 심볼로 대체될 가능성이 높다.</li></ul><h3 id="1-4-5-네이티브-프로토타입"><a href="#1-4-5-네이티브-프로토타입" class="headerlink" title="1.4.5 네이티브 프로토타입"></a>1.4.5 네이티브 프로토타입</h3><ul><li><p>내장 네이티브 생성자는 각자의 <code>.prototype</code> 객체를 가진다.(`Array.prototype, String.prototype 등)</p></li><li><p><code>prototype</code> 객체에는 해당 객체의 하위 타입별로 고유한 로직이 담겨 있다.</p></li><li><p>이를테면 문자열 원시 값을(박싱으로) 확장한 것까지 포함하여 모든 <code>String</code> 객체는 기본적으로 <code>String.prototype</code> 객체에 정의된 메서드에 접근할 수 있다.</p></li><li><p><code>String.prototype.indexOf()</code></p></li><li><p><code>String.prototype.charAt()</code></p></li><li><p><code>String.prototype.substr()</code></p></li><li><p><code>String.prototype.substring()</code></p></li><li><p><code>String.prototype.slice()</code></p></li><li><p><code>String.prototype.toUpperCase()</code></p></li><li><p><code>String.prototype.toLowerCase()</code></p></li><li><p><code>String.prototype.trim()</code></p></li><li><p><strong>이중 문자열 값을 변경하는 메서드는 없고 수저잉 일어나면 늘 기존값으로부터 새로운 값을 생성한다.</strong></p></li><li><p>프로토타임 위임(Delegation) 덕분에 모든 문자열이 이 메서드들을 같이 쓸 수 있다.</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="string">" abc "</span>;</span><br><span class="line"></span><br><span class="line">a.indexOf(<span class="string">"c"</span>); <span class="comment">// 3</span></span><br><span class="line">a.toUpperCase(); <span class="comment">// " ABC ";</span></span><br><span class="line">a.trim(); <span class="comment">// "abc";</span></span><br></pre></td></tr></table></figure><ul><li>네이티브 프로토타입은 변경할 수도 있지만 바람직하지 않다.</li><li><code>Function.prototype</code>은 함수, <code>RegExp.prototype</code>은 정규 표현식, <code>Array.prototype</code>은 배열이다.</li></ul><h2 id="1-5-정리하기"><a href="#1-5-정리하기" class="headerlink" title="1.5 정리하기"></a>1.5 정리하기</h2><ul><li>자바스크립트는 원시 값을 감싸는 객체 래퍼, 즉 네이티브(<code>String,Number,Boolean 등</code>)를 제공</li><li>“abc” 같은 원시 값이 있을 때, 이 값의 <code>length</code> 프로퍼티나 <code>String.prototype</code>에 정의된 메서드를 호출하면 자바스크립트는 <strong>자동으로 원시 값을 <code>박싱</code>(해당하는 객체 래퍼로 감싼다)</strong>하여 필요한 프로퍼티와 메서드를 쓸 수 있게 도와준다.</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-Javascript-native&quot;&gt;&lt;a href=&quot;#1-Javascript-native&quot; class=&quot;headerlink&quot; title=&quot;1. Javascript - native&quot;&gt;&lt;/a&gt;1. Javascript - native&lt;/h1
      
    
    </summary>
    
      <category term="javascript" scheme="https://shldhee.github.io/categories/javascript/"/>
    
    
      <category term="javascript" scheme="https://shldhee.github.io/tags/javascript/"/>
    
      <category term="native" scheme="https://shldhee.github.io/tags/native/"/>
    
      <category term="String" scheme="https://shldhee.github.io/tags/String/"/>
    
      <category term="Number" scheme="https://shldhee.github.io/tags/Number/"/>
    
      <category term="Array" scheme="https://shldhee.github.io/tags/Array/"/>
    
      <category term="Function" scheme="https://shldhee.github.io/tags/Function/"/>
    
      <category term="Error" scheme="https://shldhee.github.io/tags/Error/"/>
    
      <category term="Date" scheme="https://shldhee.github.io/tags/Date/"/>
    
      <category term="Symbol" scheme="https://shldhee.github.io/tags/Symbol/"/>
    
  </entry>
  
  <entry>
    <title>Javascript-value</title>
    <link href="https://shldhee.github.io/2019/04/11/Javascript-value/"/>
    <id>https://shldhee.github.io/2019/04/11/Javascript-value/</id>
    <published>2019-04-11T14:50:37.000Z</published>
    <updated>2020-07-23T08:31:33.043Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Javascript-value"><a href="#Javascript-value" class="headerlink" title="Javascript-value"></a>Javascript-value</h1><h2 id="1-1-배열"><a href="#1-1-배열" class="headerlink" title="1.1 배열"></a>1.1 배열</h2><ul><li>자바스크립트는 배열은 타입이 엄격한 다른 언어와 달리, 문자열, 숫자, 객체, 배열 등 어떤 타입의 값이라도 담을 수 있는 그릇</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="number">1</span>, <span class="string">"2"</span>, [<span class="number">3</span>]];</span><br><span class="line"></span><br><span class="line">a.length; <span class="comment">// 3</span></span><br><span class="line">a[<span class="number">0</span>] === <span class="number">1</span>; <span class="comment">// true</span></span><br><span class="line">a[<span class="number">2</span>][<span class="number">0</span>] === <span class="number">3</span>; <span class="comment">//true</span></span><br></pre></td></tr></table></figure><ul><li>배열 크기는 미리 정하지 않고 선언 가능하다.</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [];</span><br><span class="line">a.length; <span class="comment">// 0</span></span><br><span class="line">a[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">a[<span class="number">1</span>] = <span class="string">"2"</span>;</span><br><span class="line">a[<span class="number">2</span>] = [<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line">a.length; <span class="comment">// 3</span></span><br></pre></td></tr></table></figure><ul><li>배열 값에 <code>delete</code> 연산자를 적용하면 슬롯 제거가 가능하지만, <code>length</code>는 변하지 않는다.</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [];</span><br><span class="line"></span><br><span class="line">a[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">a[<span class="number">2</span>] = <span class="string">"test"</span>;</span><br><span class="line"></span><br><span class="line">a[<span class="number">1</span>]; <span class="comment">// undefined</span></span><br><span class="line"></span><br><span class="line">a.length; <span class="comment">// 3</span></span><br></pre></td></tr></table></figure><ul><li>중간에 <code>a[1]</code>이 <code>undefined</code>처럼 보이지만 실제로(크롬에서)는 <code>empty</code>라고 나오며 <code>a[1] = undefined</code>랑은 다르다.</li><li>배열 자체도 객체여서 키/프로퍼티 문자열을 추가 할수 있지만 <code>length</code>의 영향은 없다.</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [];</span><br><span class="line"></span><br><span class="line">a[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">a[<span class="string">"foobar"</span>] = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">a.length; <span class="comment">// 1</span></span><br><span class="line">a[<span class="string">"foobar"</span>]; <span class="comment">// 2</span></span><br><span class="line">a.foobar; <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><ul><li>키로 넣는 문자열 값에 10진수 숫자를 넣으면 숫자 키를 인식해서 배열 크기로 인식한다.</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [];</span><br><span class="line"></span><br><span class="line">a[<span class="string">"10"</span>] = <span class="number">42</span>;</span><br><span class="line"></span><br><span class="line">a.length; <span class="comment">// 11</span></span><br></pre></td></tr></table></figure><ul><li>배열의 키/프로퍼티는 추천하지 않으며 객체를 사용하고 배열 원소의 인덱스는 숫자만 쓰자.</li></ul><h3 id="1-1-1-유사배열"><a href="#1-1-1-유사배열" class="headerlink" title="1.1.1 유사배열"></a>1.1.1 유사배열</h3><ul><li>유사 배열 값(숫자 인덱스가 가리키는 값들의 집합)을 진짜 배열로 바꾸고 싶을 때가 있다. 이럴때는 <code>indexOf(), concat(), forEach()</code>를 사용한다.</li><li>예를 들어 DOM 쿼리 작업을 수행하면 배열은 아니지만 유사배열 형태의 DOM 원소 리스트가 반환된다. 다른 예로는 함수에서 <code>arguments</code> 객체를 사용하여 인자를 리스트로 가져오는것도 마찬가지다.</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> arr = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>);</span><br><span class="line">  arr.push(<span class="string">"bam"</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(arr);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">foo(<span class="string">"bar"</span>, <span class="string">"baz"</span>); <span class="comment">// ["bar","baz","bam"]</span></span><br></pre></td></tr></table></figure><ul><li><code>slice()</code>에 인자가 없으면 <code>slice(0)</code>과 같으며 배열복사와 같다.</li><li>ES6부터는 <code>Array.from()</code>이 대신한다.</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = <span class="built_in">Array</span>.from(<span class="built_in">arguments</span>);</span><br></pre></td></tr></table></figure><h2 id="1-2-문자열"><a href="#1-2-문자열" class="headerlink" title="1.2 문자열"></a>1.2 문자열</h2><ul><li>문자열은 문자 배열과 비슷할 뿐 같지 않다.</li><li>문자열은 배열과 겉모습이 닮았다.(유사배열) 둘다 <code>length</code>프로퍼티, <code>indexOf()</code>, <code>concat()</code>메서드를 가진다.</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="string">"foo"</span>;</span><br><span class="line"><span class="keyword">var</span> b = [<span class="string">"f"</span>, <span class="string">"o"</span>, <span class="string">"o"</span>];</span><br><span class="line"></span><br><span class="line">a.length; <span class="comment">// 3</span></span><br><span class="line">b.length; <span class="comment">// 3</span></span><br><span class="line"></span><br><span class="line">a.indexOf(<span class="string">"o"</span>); <span class="comment">// 1</span></span><br><span class="line">b.indexOf(<span class="string">"o"</span>); <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> c = a.concat(<span class="string">"bar"</span>); <span class="comment">// "foobar"</span></span><br><span class="line"><span class="keyword">var</span> d = b.concat([<span class="string">"b"</span>, <span class="string">"a"</span>, <span class="string">"r"</span>]); <span class="comment">// ["f","o","o","b","a","r"];</span></span><br><span class="line"></span><br><span class="line">a === c; <span class="comment">// false</span></span><br><span class="line">b === d; <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line">a; <span class="comment">// foo;</span></span><br><span class="line">b; <span class="comment">// ["f","o","o"]</span></span><br></pre></td></tr></table></figure><ul><li>그렇다면 기본적으로 둘 다 <strong>문자의 배열</strong>이라고 할수 있나? 그렇지 않다.</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a[<span class="number">1</span>] = <span class="string">"O"</span>;</span><br><span class="line">b[<span class="number">1</span>] = <span class="string">"O"</span>;</span><br><span class="line"></span><br><span class="line">a; <span class="comment">// "foo"</span></span><br><span class="line">b; <span class="comment">// ["f","O","o"]</span></span><br></pre></td></tr></table></figure><ul><li><strong>문자열은 불변 값(imuutable)이지만 배열은 가변(mutable)이다.</strong></li><li><code>a[1]</code>처럼 문자열의 특정 인덱스 값에 접근할수 없다. <code>a.charAt(1)</code>로 접근해야 한다.</li><li><strong>문자열은 불변값이므로 문자열 메서드는 그 내용을 바로 수정하지 않고 항상 새로운 문자열을 생성한 후 반환한다.</strong> 반면에 <em>배열 메서드는 그 자리에서 곧바로 그 배열을 수정한다.</em></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">c = a.toUpperCase();</span><br><span class="line">a === c; <span class="comment">// false</span></span><br><span class="line">a; <span class="comment">// "foo";</span></span><br><span class="line">c; <span class="comment">// "FOO";</span></span><br><span class="line"></span><br><span class="line">b.push(<span class="string">"!"</span>);</span><br><span class="line">b; <span class="comment">// ["f", "O", "o", "!"];</span></span><br></pre></td></tr></table></figure><ul><li>따라서 문자열에는 배열 메서드는 사실상 사용할 수 없지만, 문자열에 대해 불변 배열 메서드는 빌려 쓸 수 있다.</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">a.join; <span class="comment">// undefined</span></span><br><span class="line">a.map; <span class="comment">// undefined</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> c = <span class="built_in">Array</span>.prototype.join.call(a, <span class="string">"-"</span>);</span><br><span class="line"><span class="keyword">var</span> d = <span class="built_in">Array</span>.prototype.map</span><br><span class="line">  .call(a, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> v.toUpperCase() + <span class="string">"."</span>;</span><br><span class="line">  &#125;)</span><br><span class="line">  .join(<span class="string">""</span>);</span><br><span class="line"></span><br><span class="line">c; <span class="comment">// "f-o-o"</span></span><br><span class="line">d; <span class="comment">// "F.O.O."</span></span><br></pre></td></tr></table></figure><ul><li>문자열을 거꾸로 뒤집는 코드</li><li>문자열은 지원하지 않지만 배열은 사용가능하다.</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a.reverse(); <span class="comment">// Uncaught TypeError: a.reverse is not a function</span></span><br><span class="line"></span><br><span class="line">b.reverse();</span><br><span class="line">b; <span class="comment">// ["!","o","O","f"]</span></span><br></pre></td></tr></table></figure><ul><li><code>reverse()</code>는 배열 가변 메서드(배열 원본을 바로 수정)이므로 문자열에서 빌려 쓰는것도 불가능하다.</li><li>문자열 -&gt; 배열 -&gt; 문자열로 해야 문자를 거꾸로 출력할 수 있다.</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> c = a</span><br><span class="line">  .split(<span class="string">""</span>) <span class="comment">// 'a'를 문자의 배열로 분할</span></span><br><span class="line">  .reverse() <span class="comment">// 문자 배열의 순서를 거꾸로</span></span><br><span class="line">  .join(<span class="string">""</span>); <span class="comment">// 문자 배열을 합쳐 문자열로 되돌린다.</span></span><br><span class="line">c; <span class="comment">// "oof"</span></span><br></pre></td></tr></table></figure><ul><li>문자열 자체에 빈번하게 수정될 경우에는 문자 단위를 저장하는 배열로 사용하고 나중에 <code>join(&quot;&quot;)</code>을 이용해 문자열로 나타는것도 좋은 방법이다.</li></ul><h2 id="1-3-숫자"><a href="#1-3-숫자" class="headerlink" title="1.3 숫자"></a>1.3 숫자</h2><ul><li>자바스크립트의 숫자 타입은 <code>number</code>가 유일하며 정수, 부동 소수점 숫자를 모두 아우른다.</li><li>정수는 부동 소수점 값이 없는 값이다.(42.0은 정수 42와 같다.)</li><li>IEE754표준을 따르며 그중에서도 정확히 ‘배 정도(Double Precision) 표준 포맷을 사용</li></ul><h3 id="1-3-1-숫자-구문"><a href="#1-3-1-숫자-구문" class="headerlink" title="1.3.1 숫자 구문"></a>1.3.1 숫자 구문</h3><ul><li>자바스크립트 숫자는 10진수 리터럴로 표기한다.</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">42</span>;</span><br><span class="line"><span class="keyword">var</span> b = <span class="number">42.3</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 소수점이 이하가 0일때 생략 가능하다.</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">42.0</span>;</span><br><span class="line"><span class="keyword">var</span> b = <span class="number">42</span>;</span><br></pre></td></tr></table></figure><ul><li>아주 크거나 아주 작은 숫자는 지수로 표시</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">5e10</span>;</span><br><span class="line">a; <span class="comment">// 50000000000</span></span><br><span class="line">a.toExponetial(); <span class="comment">// "5e+10"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> b = a * a;</span><br><span class="line">b; <span class="comment">// 2.5e+21</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> c = <span class="number">1</span> / a;</span><br><span class="line">c; <span class="comment">// 2e-11</span></span><br></pre></td></tr></table></figure><ul><li>숫자 값은 <code>Number</code> 객체 래퍼로 박싱할 수 있기 때문에 <code>Number.prototype</code> 메서드로 접근할 수 있다.</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">42.59</span>;</span><br><span class="line"></span><br><span class="line">a.toFixed(<span class="number">0</span>); <span class="comment">// "43" 지정한 소수점 이하 자릿수까지 숫자를 나타낸다.</span></span><br><span class="line">a.toFixed(<span class="number">1</span>); <span class="comment">// "42.6"</span></span><br><span class="line">a.toFixed(<span class="number">2</span>); <span class="comment">// "42.59"</span></span><br><span class="line">a.toFixed(<span class="number">3</span>); <span class="comment">// "42.590"</span></span><br><span class="line">a.toFixed(<span class="number">4</span>); <span class="comment">// "42.5900"</span></span><br></pre></td></tr></table></figure><ul><li><code>.</code>을 사용할때 프로퍼티 접근자가 아닌 숫자 리터럴의 일부로 해석되므로 주의해야 한다.</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 잘못된 예</span></span><br><span class="line"><span class="number">42.</span>toFixed(<span class="number">3</span>); <span class="comment">// Syntax Error</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 올바른 예</span></span><br><span class="line">(<span class="number">42</span>).toFixed(<span class="number">3</span>);</span><br><span class="line"><span class="number">0.42</span>.toFixed(<span class="number">3</span>);</span><br><span class="line"><span class="number">42.</span>.toFixed(<span class="number">3</span>);</span><br><span class="line"><span class="number">42</span> .toFixed(<span class="number">3</span>);</span><br></pre></td></tr></table></figure><ul><li>큰 숫자는 보통 지수형으로 표시한다.</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> onethousand = <span class="number">1e3</span>; <span class="comment">// 1 * 10^3</span></span><br><span class="line"><span class="keyword">var</span> onemilliononehundredthousand = <span class="number">1.1e6</span>; <span class="comment">// 1.1 * 10^6</span></span><br></pre></td></tr></table></figure><ul><li>숫자 리터럴은 2진,8진,16진 등 다른 진법으로 나타낼 수 있다.</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0xf3</span>; <span class="comment">// 243의 16진수</span></span><br><span class="line"><span class="number">0xf3</span>; <span class="comment">// 위와 같다</span></span><br><span class="line"><span class="number">0363</span>; <span class="comment">// 243의 8진수</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ES6</span></span><br><span class="line"><span class="number">0o363</span>; <span class="comment">// 243의 8진수 헷갈리지 않게 o을 소문자로 하는것을 추천</span></span><br><span class="line"><span class="number">0o363</span>; <span class="comment">// 위와 같다.</span></span><br></pre></td></tr></table></figure><h3 id="1-3-2-작은-소수-값"><a href="#1-3-2-작은-소수-값" class="headerlink" title="1.3.2 작은 소수 값"></a>1.3.2 작은 소수 값</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0.1</span> + <span class="number">0.2</span> === <span class="number">0.3</span>; <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="number">0.1</span> + <span class="number">0.2</span>; <span class="comment">// 0.30000000000000004</span></span><br></pre></td></tr></table></figure><ul><li>이진 부동 소수점으로 나타낸 0.1과 0.2는 원래의 숫자와 일치하지 않는다. 그래서 0.3이 정확히 아니다.</li><li>이런 오류를 해결하기 위해서는 반올림 오차를 허용 공차(Tolerance)로 처리하는 방법이 있다. 이런 미세한 오차를 머신 입실론(Machine Epsilon)이라 한다.</li><li>자바스크립트의 머신 입실론은 2^-52이다. ES6에서는 <code>Number.EPSILON</code>으로 정의되어 있다.</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ES6 이전 폴리필</span></span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">Number</span>.EPSILON) &#123;</span><br><span class="line">  <span class="built_in">Number</span>.EPSILON = <span class="built_in">Math</span>.pow(<span class="number">2</span>, <span class="number">-52</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>Number.EPSILON</code>으로 동등함 비교</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">numbersCloseEnoughToEqual</span>(<span class="params">n1, n2</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Math</span>.abs(n1 - n2) &lt; <span class="built_in">Number</span>.EPSILON;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">0.1</span> + <span class="number">0.2</span>;</span><br><span class="line"><span class="keyword">var</span> b = <span class="number">0.3</span>;</span><br><span class="line"></span><br><span class="line">numbersCloseEnoughToEqual(a, b); <span class="comment">// true</span></span><br><span class="line">numbersCloseEnoughToEqual(<span class="number">0.000001</span>, <span class="number">0.000002</span>); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><ul><li><code>Number.MAX_VALUE</code> 부동 소수점의 최대값</li><li><code>Number.MIN_VALUE</code> 부동 소수점의 최소값</li></ul><h3 id="1-3-3-안전한-정수-범위"><a href="#1-3-3-안전한-정수-범위" class="headerlink" title="1.3.3 안전한 정수 범위"></a>1.3.3 안전한 정수 범위</h3><ul><li>안전하게 표현할 수 있는 정수는 최대 2^53 - 1 이다.</li><li>ES6에서는 <code>Number.MAX_SAFE_INTEGER</code>로 정의, 최솟값은 <code>Number.MIN_SAFE_INTEGER</code></li><li>큰 숫자가 필요한 경우는 데이터베이스 등에서 64비트 ID를 처리할때가 대부분이며 숫자 타입으로 정확하게 표시할 수 없으므로 <code>string</code> 타입으로 저장한다.</li><li>아니면 큰수 유틸리티 사용</li></ul><h3 id="1-3-4-정수인지-확인"><a href="#1-3-4-정수인지-확인" class="headerlink" title="1.3.4 정수인지 확인"></a>1.3.4 정수인지 확인</h3><ul><li>ES6 부터는 Number.isInteger()로 정수 여부 확인이 가능하다.</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Number</span>.isInteger(<span class="number">42</span>); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">Number</span>.isInteger(<span class="number">42.0</span>); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">Number</span>.isInteger(<span class="number">42.3</span>); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ES6 이전 버전 폴리필</span></span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">Number</span>.isInteger) &#123;</span><br><span class="line">    <span class="built_in">Number</span>.isInteger = <span class="function"><span class="keyword">function</span>(<span class="params">num</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">typeof</span> num = <span class="string">"number"</span> &amp;&amp; num % <span class="number">1</span> == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>안전한 정수 확인은 ES6부터는 <code>Number.isSafeInteger()</code></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ES6 이전 버젼 폴리필</span></span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">Number</span>.isSafeInteger) &#123;</span><br><span class="line">  <span class="built_in">Number</span>.isSafeInteger = <span class="function"><span class="keyword">function</span>(<span class="params">num</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Number</span>.isInteger(num) &amp;&amp; <span class="built_in">Math</span>.abs(num) &lt;= <span class="built_in">Number</span>.MAX_SAFE_INTEGER;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-3-5-32비트-부호-있는-정수"><a href="#1-3-5-32비트-부호-있는-정수" class="headerlink" title="1.3.5 32비트(부호 있는 )정수"></a>1.3.5 32비트(부호 있는 )정수</h3><ul><li>Math.pow(-2,31) 에서 Math.pow(2,31)-1 까지이다.</li></ul><h2 id="1-4-특수-값"><a href="#1-4-특수-값" class="headerlink" title="1.4 특수 값"></a>1.4 특수 값</h2><h3 id="1-4-1-값-아닌-값"><a href="#1-4-1-값-아닌-값" class="headerlink" title="1.4.1 값 아닌 값"></a>1.4.1 값 아닌 값</h3><ul><li><code>Undefined</code> 타입의 값은 undefined이다.</li><li><code>null</code> 타입의 값은 null이다.</li><li>undefined와 null은 종종 빈값과 값 아닌 값을 나타낸다.</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">- <span class="literal">null</span>은 빈값이다.</span><br><span class="line">- <span class="literal">undefined</span>는 실종된 값이다.</span><br><span class="line"></span><br><span class="line">- <span class="literal">null</span>은 예전에 값이 있었지만 지금은 없는 상태다.</span><br><span class="line">- <span class="literal">undefined</span>는 값을 아직 가지지 않은 것이다.</span><br></pre></td></tr></table></figure><ul><li>null은 식별자가 아닌 키워드므로 변수로 사용할 수 없지만 undefined는 식별자로 쓸 수 있다.</li></ul><h3 id="1-4-2-Undefined"><a href="#1-4-2-Undefined" class="headerlink" title="1.4.2 Undefined"></a>1.4.2 Undefined</h3><ul><li>느슨한 모드에서 전역스코프에서 변수로 undefined 사용이 가능하다.</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="literal">undefined</span> = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">foo();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="meta">  "use strict"</span>;</span><br><span class="line">  <span class="literal">undefined</span> = <span class="number">2</span>; <span class="comment">// 타입 에러 발생</span></span><br><span class="line">&#125;</span><br><span class="line">foo();</span><br></pre></td></tr></table></figure><ul><li>모드에 상관없이 지역변수는 가능하다.</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="meta">  "use strict"</span>;</span><br><span class="line">  <span class="keyword">var</span> <span class="literal">undefined</span> = <span class="number">2</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="literal">undefined</span>); <span class="comment">// 2</span></span><br><span class="line">&#125;</span><br><span class="line">foo();</span><br></pre></td></tr></table></figure><h3 id="1-4-3-특수-문자"><a href="#1-4-3-특수-문자" class="headerlink" title="1.4.3 특수 문자"></a>1.4.3 특수 문자</h3><h4 id="NaN"><a href="#NaN" class="headerlink" title="NaN"></a>NaN</h4><ul><li>두 피 연산자가 숫자가 아닌 이상 유효한 숫자가 나오지 않고 NaN이 나온다.</li><li>Not a Number그대로 숫자 아님이라는 설명은 너무 부실하고 유효하지 않은 숫자, 실패한 숫자, 또는 몹쓸 숫자라고 불리는 게 더 정확하다.</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">2</span> / <span class="string">"foo"</span>; <span class="comment">// NaN</span></span><br><span class="line"><span class="keyword">typeof</span> a === <span class="string">"number"</span>; <span class="comment">// true</span></span><br></pre></td></tr></table></figure><ul><li>숫자가 아닌데 타입은 <code>number</code>라니….</li><li>NaN은 경계 값의 일종으로 숫자 집합 내에서 특별한 종류의 에러 상황을 나타낸다.</li><li>다른 타입처럼 체크하고 싶지만 이상하다.</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">2</span> / <span class="string">"foo"</span>;</span><br><span class="line"></span><br><span class="line">a == <span class="literal">NaN</span>; <span class="comment">// false</span></span><br><span class="line">a === <span class="literal">NaN</span>; <span class="comment">// false</span></span><br></pre></td></tr></table></figure><ul><li><strong>NaN은 어떤 NaN과도 동일하지 않다.</strong></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">2</span> / <span class="string">"foo"</span>;</span><br><span class="line"><span class="keyword">var</span> b = <span class="string">"foo"</span>;</span><br><span class="line"></span><br><span class="line">a; <span class="comment">// NaN</span></span><br><span class="line">b; <span class="comment">// "foo"</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">window</span>.isNaN(a); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">window</span>.isNaN(b); <span class="comment">// true - ???</span></span><br></pre></td></tr></table></figure><ul><li>b는 숫자가 아니지만 NaN이 아니다.</li><li>이걸 해결하기 위해 ES6부터는 Number.isNaN()을 사용</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!<span class="built_in">Number</span>.isNaN) &#123;</span><br><span class="line">  <span class="built_in">Number</span>.isNaN = <span class="function"><span class="keyword">function</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">typeof</span> n === <span class="string">"number"</span> &amp;&amp; <span class="built_in">window</span>.isNaN(n);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">2</span> / <span class="string">"foo"</span>;</span><br><span class="line"><span class="keyword">var</span> b = <span class="string">"foo"</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Number</span>.isNaN(a); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">Number</span>.isNaN(b); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><ul><li>NaN은 자기 자신과도 동등하지 않는 독특함을 응용해서 폴리필을 더 간단히 구현</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!<span class="built_in">Number</span>.isNaN) &#123;</span><br><span class="line">  <span class="built_in">Number</span>.isNaN = <span class="function"><span class="keyword">function</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> n !== n;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="무한대"><a href="#무한대" class="headerlink" title="무한대"></a>무한대</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span> / <span class="number">0</span>; <span class="comment">// Infinity</span></span><br><span class="line"><span class="keyword">var</span> b = <span class="number">-1</span> / <span class="number">0</span>; <span class="comment">// -Infinity</span></span><br></pre></td></tr></table></figure><ul><li>자바스크립트는 유한 숫자 표현식을 사용하므로 연산 결과가 +무한대 / -무한대가 될 수 있다.</li><li>무한을 무한으로 나누면 NaN</li></ul><h4 id="영-0"><a href="#영-0" class="headerlink" title="영(0)"></a>영(0)</h4><ul><li>보통의 영(+0)과 음의 영(-0)이 존재</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">0</span> / <span class="number">-3</span>; <span class="comment">// -0</span></span><br><span class="line"><span class="keyword">var</span> b = <span class="number">0</span> * <span class="number">-3</span>; <span class="comment">// -0</span></span><br></pre></td></tr></table></figure><ul><li>덧셈과 뺄셈에는 -0이 나올일이 없다.</li><li>명세에 따르면 -0을 문자열화 하면 항상 “0”이다.</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">0</span> / <span class="number">-3</span>;</span><br><span class="line"></span><br><span class="line">a; <span class="comment">// -0</span></span><br><span class="line"></span><br><span class="line">a.toString(); <span class="comment">// "0"</span></span><br><span class="line">a + <span class="string">""</span>; <span class="comment">// "0"</span></span><br><span class="line"><span class="built_in">String</span>(a); <span class="comment">// "0"</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">JSON</span>.stringify(a); <span class="comment">// "0"</span></span><br></pre></td></tr></table></figure><ul><li>브라우저만 제대로 표시되고 나머지에서는 0으로 보여준다.</li><li>반대로 하면 -0으로 있는 그대로 보여준다.(문자열 -&gt; 숫자)</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">+<span class="string">"-0"</span>; <span class="comment">// -0</span></span><br><span class="line"><span class="built_in">Number</span>(<span class="string">"-0"</span>); <span class="comment">// -0</span></span><br><span class="line"><span class="built_in">JSON</span>.parse(<span class="string">"-0"</span>); <span class="comment">// -0</span></span><br></pre></td></tr></table></figure><ul><li>0과 -0을 구분하려면 다음 함수를 사용</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// -0 인지 확인</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isNegZero</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">  n = <span class="built_in">Number</span>(n);</span><br><span class="line">  <span class="keyword">return</span> n === <span class="number">0</span> &amp;&amp; <span class="number">1</span> / n === -<span class="literal">Infinity</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">isNegZero(<span class="number">-0</span>); <span class="comment">// true;</span></span><br><span class="line">isNegZero(<span class="number">0</span> / <span class="number">-3</span>); <span class="comment">// true;</span></span><br><span class="line">isNegZero(<span class="number">0</span>); <span class="comment">// false;</span></span><br></pre></td></tr></table></figure><ul><li>-0, +0 이 필요한 이유는 값의 크기로 어떤 정보(예 : 애니메이션 프레임당 넘김 속도)와 그 값의 부호로 또 다른 정보(예 : 넘김방향)를 동시에 나타내야 하는 경우가 있기 때문이다.</li></ul><h3 id="1-4-4-특이한-동등-비교"><a href="#1-4-4-특이한-동등-비교" class="headerlink" title="1.4.4 특이한 동등 비교"></a>1.4.4 특이한 동등 비교</h3><ul><li>ES6부터는 두 값이 절대적으로 동등한지를 확인하는 새로운 유틸리티를 지원한다.</li><li><code>Object.is()</code>를 사용</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">2</span> / <span class="string">"foo"</span>; <span class="comment">// NaN</span></span><br><span class="line"><span class="keyword">var</span> b = <span class="number">-3</span> * <span class="number">0</span>; <span class="comment">// -0</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.is(a, <span class="literal">NaN</span>); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">Object</span>.is(b, <span class="number">-0</span>); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">Object</span>.is(b, <span class="number">0</span>); <span class="comment">// False</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//ES6 이전 폴리필</span></span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">Object</span>.is) &#123;</span><br><span class="line">  <span class="built_in">Object</span>.is = <span class="function"><span class="keyword">function</span>(<span class="params">v1, v2</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// -0 테스트</span></span><br><span class="line">    <span class="keyword">if</span> (v1 === <span class="number">0</span> &amp;&amp; v2 === <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">1</span> / v1 === <span class="number">1</span> / v2;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// NaN 테스트</span></span><br><span class="line">    <span class="keyword">if</span> (v1 !== v1) &#123;</span><br><span class="line">      <span class="keyword">return</span> v2 !== v2;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 기타</span></span><br><span class="line">    <span class="keyword">return</span> v1 === v2;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>==</code>,<code>===</code>가 안전하다면 <code>Object.is()</code>는 사용하지 않는것이 좋다.(강제변환 이슈) 그리고 기본 연산자가 빠르고 일반적이다. 특이한 동등 비교 할때만 사용하자.</li></ul><h2 id="2-5-값-vs-레퍼런스"><a href="#2-5-값-vs-레퍼런스" class="headerlink" title="2.5 값 vs 레퍼런스"></a>2.5 값 vs 레퍼런스</h2><ul><li>언어마다 값-복사, 레퍼런스-복사의 형태로 할당/전달된다.</li><li>자바스크립트에서 레퍼런스는 (공유된) 값을 가리키므로 서로 다른 10개의 레퍼런스가 있다면 이들은 저마다 항상 공유된 단일 값(서로에 대한 레퍼런스/포인터 따위는 없다)을 개별적으로 참조</li><li>값의 타입만으로 값-복사, 레퍼런스-복사 둘 중 한쪽이 결정된다.</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">2</span>; <span class="comment">// 2는 원시값으로 a엔 초기 사본</span></span><br><span class="line"><span class="keyword">var</span> b = a; <span class="comment">// 'b'는 언제나 'a'값을 복사 또다른 사본</span></span><br><span class="line">b++;</span><br><span class="line">a; <span class="comment">// 2</span></span><br><span class="line">b; <span class="comment">// 3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> c = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]; <span class="comment">// 동일한 공유 값 [1,2,3]에 대한 개별 레퍼런스</span></span><br><span class="line"><span class="keyword">var</span> d = c; <span class="comment">// 'd'는 공유된 '[1,2,3]'값의 레퍼런스</span></span><br><span class="line">d.push(<span class="number">4</span>);</span><br><span class="line">c; <span class="comment">// [1,2,3,4]</span></span><br><span class="line">d; <span class="comment">// [1,2,3,4]</span></span><br></pre></td></tr></table></figure><ul><li><code>null, undefined, string, number, boolean, symbol</code> 같은 단순 값은(원시값) 언제나 값-복사 방식으로 할당/전달</li><li>객체나 함수 등 합성 값은 할당/전달 시 반드시 <strong>레퍼런스 사본</strong>을 생성</li><li><code>c,d</code>는 레퍼런스 값을 동등하게 참조, 레퍼런스로 실제 공유한 배열 값이 변경되면, 이 공유 값 한군데에만 영향을 미치므로 두 레퍼런스는 갱신된 값 [1,2,3,4]를 쳐다본다.</li><li>레퍼런스는 변수가 아닌 값 자체를 가리키므로 A레퍼런스로 B레퍼런스가 가리키는 대상을 변경할 수 없다.</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">var</span> b = a;</span><br><span class="line"></span><br><span class="line">b = [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>];</span><br><span class="line">a; <span class="comment">// [1,2,3]</span></span><br><span class="line">b; <span class="comment">// [4,5,6]</span></span><br></pre></td></tr></table></figure><ul><li>b를 [4,5,6]으로 할당해도 a가 참조하는 [1,2,3]은 영향 받지 않는다.</li><li>a가 변경경되려면 포인터 개념이 존재해야되는데 자바스크립트는 포인터 개념이 없다!</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">  x.push(<span class="number">4</span>);</span><br><span class="line">  x; <span class="comment">// (1)</span></span><br><span class="line"></span><br><span class="line">  x = [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>];</span><br><span class="line">  x.push(<span class="number">7</span>);</span><br><span class="line">  x; <span class="comment">// (2)</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">foo(a);</span><br><span class="line"></span><br><span class="line">a; <span class="comment">// (3)</span></span><br></pre></td></tr></table></figure><ul><li>(1) : [1,2,3,4]</li><li>(2) : [4,5,6,7]</li><li>(3) : [1,2,3,4]</li><li>a를 인자로 넘기면 a의 레퍼런스 사본이 x에 할당 (a와 x는 [1,2,3])</li><li>x = [4,5,6] 하는 순간 x는 새로운 레퍼런스를 참고하면서 a와 같은 곳을 참조하던 레퍼런스가 변경된다.</li><li>레퍼런스 x로 a가 가리키고 있는 값을 바꿀 방법이 없다.</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">  x.push(<span class="number">4</span>);</span><br><span class="line">  x; <span class="comment">// (1)</span></span><br><span class="line"></span><br><span class="line">  x.length = <span class="number">0</span>;</span><br><span class="line">  x.push(<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>);</span><br><span class="line">  x; <span class="comment">// (2)</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">foo(a);</span><br><span class="line"></span><br><span class="line">a; <span class="comment">// (3)</span></span><br></pre></td></tr></table></figure><ul><li><p>(1) : [1,2,3,4]</p></li><li><p>(2) : [4,5,6,7]</p></li><li><p>(3) : [4,5,6,7]</p></li><li><p><code>x.length</code>로 배열(a와 x가 가리키고 있는 레퍼런스)은 변경하는 방식이다.</p></li><li><p>합성 값을 값-복사에 효과적으로 전달하려면 손수 값의 사본을 만들어 레퍼런스가 원본을 가리키지 않게 한다.</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">foo(a.slice());</span><br></pre></td></tr></table></figure><ul><li><code>slice()</code>가 얕은 복사로 새로운 배열의 사본을 생성</li><li><code>foo()</code>는 <code>a</code>의 내용을 건들릴 수 없다.</li><li>반대로 원시값을 합성 값(객체, 배열 등)처럼으로 바로바로 바뀐값을 반영시키려면 다른 합성 값으로 감싸야 한다.</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">wrapper</span>) </span>&#123;</span><br><span class="line">  wrapper.a = <span class="number">42</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  a: <span class="number">2</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">foo(obj);</span><br><span class="line"></span><br><span class="line">obj.a; <span class="comment">// 42</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">  x = x + <span class="number">1</span>;</span><br><span class="line">  x; <span class="comment">//3</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">var</span> b = <span class="keyword">new</span> <span class="built_in">Number</span>(a);</span><br><span class="line"></span><br><span class="line">foo(b);</span><br><span class="line"><span class="built_in">console</span>.log(b);</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">typeof</span> x); <span class="comment">//object</span></span><br><span class="line">  x = x + <span class="number">1</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">typeof</span> x); <span class="comment">// number</span></span><br><span class="line">  x; <span class="comment">//3</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">var</span> b = <span class="keyword">new</span> <span class="built_in">Number</span>(a);</span><br><span class="line"></span><br><span class="line">foo(b);</span><br><span class="line"><span class="built_in">console</span>.log(b); <span class="comment">// Number &#123;2&#125;</span></span><br></pre></td></tr></table></figure><ul><li>원시값은 불변이다. 따라서 원시값 2를 가진 <code>Number</code>객체가 있다면, 이와 동일한 객체(Number)가 다른 원시값을 가지도록 변경할 수 없다. 단 새로운 다른값을 넣은 별개의 <code>Number</code> 객체를 생성할 수는 있다.</li><li><code>x = x + 1</code>에서 <code>x</code>는 자동으로 객체에서 언박싱되어 <code>x</code>는 공유된 레퍼런스에서 <code>Number</code> 객체로 교모하게 바뀌고 <code>x</code>의 값은 3이 된다.</li><li>따라서 바깥의 b는 원시 값 2를 씌운, 변경되지 않는/불변의 원본 <code>Number</code> 객체를 참조한다.</li><li>손수 객체 래퍼(obj)나 원시값을 쓰는게 좋다.</li></ul><h2 id="1-6-정리하기"><a href="#1-6-정리하기" class="headerlink" title="1.6 정리하기"></a>1.6 정리하기</h2><ul><li>자바스크립트 배열은 모든 타입의 값을 숫자로 인덱싱한 집합</li><li>문자열은 일종의 ‘유사배열’이므로 주의하고 숫자는 ‘정수’와 ‘부동소수점’으로 이루어져있다.</li><li><code>null</code>은 <code>null</code>타임 하나고 <code>undefined</code>도 <code>undefined</code>하나이다.</li><li>변수에 할당된 값이 없다면 <code>undefined</code>값이 기본값</li><li>숫자에는 <code>NaN, +Infinity, -Infinity, -0</code>같은 특수 값이 있다.</li><li>원시값은 값-복사, 합성값(배열, 함수 등 객체)는 레퍼런스-복사에 의해 값이 할당/전달된다.</li><li>자바스크립트의 레퍼런스는 또 다른 변수/레퍼런스가 아닌 오직 자신의 값만을 가리킨다.</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Javascript-value&quot;&gt;&lt;a href=&quot;#Javascript-value&quot; class=&quot;headerlink&quot; title=&quot;Javascript-value&quot;&gt;&lt;/a&gt;Javascript-value&lt;/h1&gt;&lt;h2 id=&quot;1-1-배열&quot;&gt;&lt;
      
    
    </summary>
    
      <category term="javascript" scheme="https://shldhee.github.io/categories/javascript/"/>
    
    
      <category term="javascript" scheme="https://shldhee.github.io/tags/javascript/"/>
    
      <category term="undefined" scheme="https://shldhee.github.io/tags/undefined/"/>
    
      <category term="value" scheme="https://shldhee.github.io/tags/value/"/>
    
      <category term="reference" scheme="https://shldhee.github.io/tags/reference/"/>
    
      <category term="string" scheme="https://shldhee.github.io/tags/string/"/>
    
      <category term="number" scheme="https://shldhee.github.io/tags/number/"/>
    
  </entry>
  
  <entry>
    <title>Javascript-Type</title>
    <link href="https://shldhee.github.io/2019/04/09/javascript-type/"/>
    <id>https://shldhee.github.io/2019/04/09/javascript-type/</id>
    <published>2019-04-08T15:28:15.000Z</published>
    <updated>2020-07-23T08:31:33.045Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Javascript-type"><a href="#Javascript-type" class="headerlink" title="Javascript - type"></a>Javascript - type</h1><ul><li><code>type(타입)</code>이란 자바스크립트 엔진, 개발자 모두에게 어떤 값을 다른 값과 분별할 수 있는, 고유한 내부 특성의 집합</li></ul><h2 id="1-1-타입-그-실체를-이해하자"><a href="#1-1-타입-그-실체를-이해하자" class="headerlink" title="1.1 타입, 그 실체를 이해하자"></a>1.1 타입, 그 실체를 이해하자</h2><ul><li>타입별로 내재된 특성을 제대로 알아야 값을 다른 타입으로 변환하는 방법을 정확히 이해할 수 있다.(강제변환)<ul><li>ex) 42를 문자열로 보고 위치 1에서 “2”라는 문자를 추출하려면, 먼저 숫자 42에서 문자열 “42”로 변경(강제변환)해야 한다.</li></ul></li><li>강제변환은 다양한 방식으로 일어나므로 값/타입을 확실히 알아야 추후 문제가 생기지 않는다.</li></ul><h2 id="1-2-내장타입"><a href="#1-2-내장타입" class="headerlink" title="1.2 내장타입"></a>1.2 내장타입</h2><ul><li><code>null</code></li><li><code>undefined</code></li><li><code>boolean</code></li><li><code>number</code></li><li><code>string</code></li><li><code>object</code></li><li><code>symbol(ES6부터)</code></li><li><code>object</code>를 제외한 이들은 <code>원시 타입(primitives)</code>이다.</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typeof</span> <span class="literal">undefined</span> === <span class="string">"undefined"</span> <span class="comment">// true</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="literal">true</span> === <span class="string">"boolean"</span> <span class="comment">// true</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="number">42</span> === <span class="string">"number"</span> <span class="comment">// true</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="string">"42"</span> === <span class="string">"string"</span> <span class="comment">// true</span></span><br><span class="line"><span class="keyword">typeof</span> &#123; <span class="attr">life</span> : <span class="number">42</span> &#125; === <span class="string">"object"</span> <span class="comment">// true</span></span><br><span class="line"><span class="comment">// ES6부터 추가</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="built_in">Symbol</span>() === <span class="string">"symbol"</span> <span class="comment">// true</span></span><br></pre></td></tr></table></figure><ul><li><code>null</code>를 제외한 6개 타입은 자신의 명칭과 동일한 문자열을 반환한다.</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typeof</span> <span class="literal">null</span> === <span class="string">"object"</span> <span class="comment">// true</span></span><br></pre></td></tr></table></figure><ul><li><code>null</code>를 반환하면 좋겠지만 현재 수정하기에는 너무 멀리 온 듯하다…..</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="literal">null</span>;</span><br><span class="line">(!a &amp;&amp; <span class="keyword">typeof</span> a === <span class="string">"object"</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><ul><li><code>null</code>을 확인하는 방법은 <code>null</code>이 falsy한 값을 이용해 falsy한 원시값과 object를 이용해 타입을 체크한다.</li><li><code>typeof</code>가 반환하는 문자열은 하나 더 있다. <code>&quot;function&quot;</code></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typeof</span> <span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>) </span>&#123;...&#125; === <span class="string">"function"</span>; <span class="comment">// true</span></span><br></pre></td></tr></table></figure><ul><li><code>function</code>이 최상위 레벨의 내장타입같지만 명세를 읽어보면 <code>object</code>의 하위 타입이다.</li><li>함수는 <code>호출 가능한 객체(Callable Object)내부 프로퍼티[[Call]]로 호출할 수 있는 객체</code>라고 명시되어 있다.</li><li>함수는 객체이므로 프로퍼티를 사용할 수 있다.<ul><li>함수의 선언된 인자 개수는 함수 객체의 <code>length</code>프로퍼티로 알 수 있다.</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sum.length; <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><ul><li>배열도 객체의 ‘하위 타입’이며 숫자 인덱스를 가지며, <code>length</code> 프로퍼티가 자동으로 관리되는 등 추가 특성을 가지고 있다.</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typeof</span> [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>] === <span class="string">"object"</span> <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h2 id="1-3-값은-타입을-가진다"><a href="#1-3-값은-타입을-가진다" class="headerlink" title="1.3 값은 타입을 가진다."></a>1.3 값은 타입을 가진다.</h2><ul><li><strong>값에는 타입이 있지만 변수엔 타입이 없다.</strong></li><li>변수는 언제라도 어떤 형태의 값이라도 가질 수 있다.</li><li>자바스크립트는 <code>타입 강제(type enforcement</code>를 하지 않는다.<ul><li>변수값이 처음에 할당된 값과 동일한 타입일 필요가 없다.(문자열을 넣었다가 숫자를 넣었다 불린을 넣어도 된다.)</li></ul></li><li>반면에, 값은 타입을 절대 바꿀 수 없다.<ul><li>42는 내장된 숫자 타입의 값이고 “42”는 내장된 문자열 타입의 값이다. 이 타입은 절대 바꿀 수 없지만 강제변환을 할 수 있다.</li></ul></li><li>변수에 typeof 연산자를 사용하는건 <code>이 변수의 타입이 무엇이니?</code>랑 같지만 실은 타입이란 개념은 변수에 없으므로 <code>이 변수에 들어있는값의 타입은 무엇이니?</code>라고 묻는게 정확하다.</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">42</span>;</span><br><span class="line"><span class="keyword">typeof</span> a; <span class="comment">// "number"</span></span><br><span class="line"></span><br><span class="line">a = <span class="literal">true</span></span><br><span class="line"><span class="keyword">typeof</span> a; <span class="comment">// "boolean"</span></span><br></pre></td></tr></table></figure><ul><li>typeof 연산자의 반환값은 언제나 문자열이다.</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typeof</span> <span class="keyword">typeof</span> <span class="number">42</span>; <span class="comment">// string</span></span><br></pre></td></tr></table></figure><h3 id="1-3-1-값이-없는-undefined-vs-선언되지-않은-undeclared"><a href="#1-3-1-값이-없는-undefined-vs-선언되지-않은-undeclared" class="headerlink" title="1.3.1 값이 없는(undefined) vs 선언되지 않은(undeclared)"></a>1.3.1 값이 없는(undefined) vs 선언되지 않은(undeclared)</h3><ul><li><code>undefined</code> : 접근 가능한 스코프에 변수가 선언되었으나 현재 아무런 값도 할당되지 않는 상태</li><li><code>undeclared</code> : 변수 자체가 선언조차 되지 않은 상태</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a;</span><br><span class="line"></span><br><span class="line">a; <span class="comment">// undefined;</span></span><br><span class="line">b; <span class="comment">// ReferenceError: b가 정의되지 않았습니다.</span></span><br><span class="line"><span class="comment">// b is not defined</span></span><br></pre></td></tr></table></figure><ul><li><code>undefined</code>와 <code>b is not defined</code>랑 뜻이 다르니 꼭 참고하자.</li><li>선언되지 않은 변수의 typeof 변수는 더 헷갈린다.</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a;</span><br><span class="line"><span class="keyword">typeof</span> a; <span class="comment">// undefined</span></span><br><span class="line"><span class="keyword">typeof</span> b; <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><ul><li>typeof는 선언되지 않는 변수인데 오류를 발생하지 않는다.</li><li><strong>이것이 바로 typeof만의 특별한 안전가드</strong>이다.</li></ul><h3 id="1-3-2-선언되지-않는-변수"><a href="#1-3-2-선언되지-않는-변수" class="headerlink" title="1.3.2 선언되지 않는 변수"></a>1.3.2 선언되지 않는 변수</h3><ul><li>여러 스크립트 파일의 변수들이 전역 네임스페이스를 공유할때, typeof의 안전 가드는 의외로 쓸모가 있다.</li><li>존재하지 않는 기능이나 전역변수 플래그 등을 사용할때</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// DEBUG가 선언되지 않았을 경우 이떄는 에러가 난다.</span></span><br><span class="line"><span class="keyword">if</span> (DEBUG) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"디버깅 시작"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// typeof 안전가드를 사용해 에러가 나지 않는다.</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> DEBUG !== <span class="string">"undefined"</span>) &#123;</span><br><span class="line">  coosole.log(<span class="string">"디버깅 시작"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 새로운 폴리필 기능을 추가할때</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> sum === <span class="string">"undefined"</span>) &#123;</span><br><span class="line">  sum = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; ... &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>새로운 폴리필 기능을 추가할때 <code>var sum = function() {}</code>대신 <code>sum = function() {}</code>를 사용하는 이유는 <code>var</code>를 사용시에는 호이스팅이 적용되어 최상위에 <code>sum</code>이 선언된다.</p></li><li><p>이러한 경우 <code>sum</code>이 다른곳에 존재하여 여기서 사용이 되지 않아도 중복 선언이 되면 오류를 내는 경우가 있으므로 조심해야 한다.</p></li><li><p>ES6에서는 <code>let</code>는 블록스코프가 적용되므로 문제가 발생하지 않는다.</p></li><li><p>소스를 복사해서 붙혀넣기할때 소스안에 특정 변수값이 정의되어 있는지 체크할때</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">doSomethingCool</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> helper = (<span class="keyword">typeof</span> Feature !== <span class="string">"undefined"</span>) ? Feature : <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;...&#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> val = helper();</span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>Feature</code>라는 변수가 있으면 그대로 사용하고 없으면 새로 만든 함수를 할당하여 사용한다.</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">feature</span>(<span class="params"></span>) </span>&#123; <span class="keyword">return</span> <span class="string">"새로운 기능"</span> &#125;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">doSomethingCool</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> helper = (<span class="keyword">typeof</span> feature !== <span class="string">"undefined"</span>) ? feature : <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="keyword">return</span> <span class="string">"기본 기능"</span> &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  doSomethingCool();</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><ul><li>새로운 기능을 선언하고 없으면 기본 기능을 사용</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">doSomethingCool</span>(<span class="params">feature</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> helper = feature || <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="keyword">return</span> <span class="string">"기본기능"</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>의존성 주입 설계 패턴</li><li>참고 : <a href="https://m.blog.naver.com/PostView.nhn?blogId=pjt3591oo&amp;logNo=220893520541&amp;proxyReferer=https%3A%2F%2Fwww.google.com%2F" rel="external nofollow noopener noreferrer" target="_blank">https://m.blog.naver.com/PostView.nhn?blogId=pjt3591oo&amp;logNo=220893520541&amp;proxyReferer=https%3A%2F%2Fwww.google.com%2F</a></li></ul><h2 id="1-4-정리하기"><a href="#1-4-정리하기" class="headerlink" title="1.4 정리하기"></a>1.4 정리하기</h2><ul><li>타입은 값의 내재된 특성을 정의한다.</li><li>자바스크립트에는 7가지 타입이 있다.</li><li>변수는 타입이 없고 값은 타입이 있다.</li><li><code>undefined</code>, <code>undeclared</code> 큰 차이가 있다. 아예 다르다.</li><li><code>typeof</code> 안전가드의 활용이 제법 쓸만하다.</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Javascript-type&quot;&gt;&lt;a href=&quot;#Javascript-type&quot; class=&quot;headerlink&quot; title=&quot;Javascript - type&quot;&gt;&lt;/a&gt;Javascript - type&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ty
      
    
    </summary>
    
      <category term="javascript" scheme="https://shldhee.github.io/categories/javascript/"/>
    
    
      <category term="javascript" scheme="https://shldhee.github.io/tags/javascript/"/>
    
      <category term="type" scheme="https://shldhee.github.io/tags/type/"/>
    
      <category term="undefined" scheme="https://shldhee.github.io/tags/undefined/"/>
    
      <category term="undeclared" scheme="https://shldhee.github.io/tags/undeclared/"/>
    
  </entry>
  
  <entry>
    <title>CSS - nth-child, nth-of-type 알아보기</title>
    <link href="https://shldhee.github.io/2019/01/17/css-nth/"/>
    <id>https://shldhee.github.io/2019/01/17/css-nth/</id>
    <published>2019-01-17T08:59:22.000Z</published>
    <updated>2020-07-23T08:31:33.044Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CSS-nth-child-nth-of-type"><a href="#CSS-nth-child-nth-of-type" class="headerlink" title="CSS - nth-child, nth-of-type"></a>CSS - nth-child, nth-of-type</h1><ul><li>특정 순서를 선택하고 싶을때 <code>nth-child, nth-of-type</code> 사용한다.</li></ul><h2 id="element-nth-child-n"><a href="#element-nth-child-n" class="headerlink" title="element:nth-child(n)"></a><strong><code>element:nth-child(n)</code></strong></h2><ul><li>부모의 n번째 자식을 찾고 해당 <code>element</code> 선택</li><li>해당 <code>element</code>가 아니면 선택되지 않는다.</li><li>중간 중간 다른 <code>element</code>들이 있으면 모두 자식으로 선택되어 자식의 n번째를 찾는다.</li></ul><h2 id="element-nth-of-type-n"><a href="#element-nth-of-type-n" class="headerlink" title="element:nth-of-type(n)"></a><strong><code>element:nth-of-type(n)</code></strong></h2><ul><li>부모의 n번째 해당 <code>element</code> 선택</li><li>중간 중간 다른 <code>element</code>들이 있어도 모두 자식으로 선택되지 않고 해당 <code>element</code> 만 선택되어 n번째를 찾는다.</li></ul><h3 id="예제"><a href="#예제" class="headerlink" title="예제"></a>예제</h3><h4 id="자식이-lt-p-gt-lt-p-gt-2개-일때"><a href="#자식이-lt-p-gt-lt-p-gt-2개-일때" class="headerlink" title="자식이 &lt;p&gt;&lt;/p&gt; 2개 일때"></a>자식이 <code>&lt;p&gt;&lt;/p&gt;</code> 2개 일때</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="selector-tag">style</span>&gt;</span><br><span class="line">  <span class="selector-tag">p</span><span class="selector-pseudo">:nth-child(2)</span>  &#123;  <span class="attribute">color</span>: red;  &#125;</span><br><span class="line">  <span class="selector-tag">p</span><span class="selector-pseudo">:nth-of-type(2)</span>  &#123;  <span class="attribute">color</span>: red;  &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">section</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>Little<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>Piggy<span class="tag">&lt;/<span class="name">p</span>&gt;</span>    <span class="comment">&lt;!-- 이 부분을 선택하고 싶다 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><code>p:nth-child(2)</code> 는 부모의 2번째 자식을 찾고 해당 <code>element</code>가 <code>&lt;p&gt;&lt;/p&gt;</code>여야 한다.</li><li><code>p:nth-of-type(2)</code>는 부모의 자식들 중 <code>element</code>가 <code>&lt;p&gt;&lt;/p&gt;</code> 중에서 2번째 <code>p</code>를 선택한다.</li><li>현재 <code>&lt;p&gt;&lt;/p&gt;</code>는 2개 있으므로 둘 다 선택된다.</li></ul><p><img src="/images/CSS/nth/nth1.png" alt="nth1"></p><h4 id="자식이-lt-h1-gt-lt-h1-gt-1개이고-lt-p-gt-lt-p-gt-2개-일때"><a href="#자식이-lt-h1-gt-lt-h1-gt-1개이고-lt-p-gt-lt-p-gt-2개-일때" class="headerlink" title="자식이 &lt;h1&gt;&lt;/h1&gt;1개이고 &lt;p&gt;&lt;/p&gt; 2개 일때"></a>자식이 <code>&lt;h1&gt;&lt;/h1&gt;</code>1개이고 <code>&lt;p&gt;&lt;/p&gt;</code> 2개 일때</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="selector-tag">style</span>&gt;</span><br><span class="line">  <span class="selector-tag">p</span><span class="selector-pseudo">:nth-child(2)</span>  &#123;  <span class="attribute">color</span>: red;  &#125;  <span class="comment">/* Now incorrect */</span></span><br><span class="line">  <span class="selector-tag">p</span><span class="selector-pseudo">:nth-of-type(2)</span>  &#123;  <span class="attribute">color</span>: red;  &#125;  <span class="comment">/* Still works */</span></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">section</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Words<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>Little<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>Piggy<span class="tag">&lt;/<span class="name">p</span>&gt;</span>    <span class="comment">&lt;!-- 이 부분을 선택하고 싶다 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><code>p:nth-child(2)</code> 는 부모의 2번째 자식(<code>&lt;p&gt;Little&lt;/p&gt;</code>)을 찾고 해당 <code>element</code>가 <code>&lt;p&gt;&lt;/p&gt;</code>이므로 선택된다.</li><li><code>p:nth-of-type(2)</code>는 부모의 자식들 중 <code>element</code>가 <code>&lt;p&gt;&lt;/p&gt;</code> 중에서 2번째 <code>p</code>를 선택한다.</li></ul><p><img src="/images/CSS/nth/nth2.png" alt="nth2"><br><img src="/images/CSS/nth/nth3.png" alt="nth3"></p><h4 id="정리"><a href="#정리" class="headerlink" title="정리"></a>정리</h4><ul><li><code>nth-of-type</code>을 사용하는 것이 더 직관적이고 편한 것 같다. 우선 구조가 변경(태그 추가 및 삭제)되도 적용이 가능한 점이 좋아보인다.</li><li>CSS 관련된 다른 선택자들은 아래 참고 사이트를 참조해주세요.</li></ul><h5 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h5><p><a href="https://css-tricks.com/pseudo-class-selectors/" rel="external nofollow noopener noreferrer" target="_blank">https://css-tricks.com/pseudo-class-selectors/</a><br><a href="https://css-tricks.com/the-difference-between-nth-child-and-nth-of-type/" rel="external nofollow noopener noreferrer" target="_blank">https://css-tricks.com/the-difference-between-nth-child-and-nth-of-type/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;CSS-nth-child-nth-of-type&quot;&gt;&lt;a href=&quot;#CSS-nth-child-nth-of-type&quot; class=&quot;headerlink&quot; title=&quot;CSS - nth-child, nth-of-type&quot;&gt;&lt;/a&gt;CSS - nt
      
    
    </summary>
    
      <category term="CSS" scheme="https://shldhee.github.io/categories/CSS/"/>
    
    
      <category term="CSS" scheme="https://shldhee.github.io/tags/CSS/"/>
    
      <category term="SELECTOR" scheme="https://shldhee.github.io/tags/SELECTOR/"/>
    
      <category term="NTH-CHILD" scheme="https://shldhee.github.io/tags/NTH-CHILD/"/>
    
      <category term="NTH-OF-TYPE" scheme="https://shldhee.github.io/tags/NTH-OF-TYPE/"/>
    
  </entry>
  
  <entry>
    <title>리뷰 겸 정리-새로운 CSS 레이아웃(The New CSS Layout)</title>
    <link href="https://shldhee.github.io/2019/01/04/Review-NewCSS/"/>
    <id>https://shldhee.github.io/2019/01/04/Review-NewCSS/</id>
    <published>2019-01-04T07:28:51.000Z</published>
    <updated>2021-11-04T09:16:21.056Z</updated>
    
    <content type="html"><![CDATA[<h1 id="새로운-CSS-레이아웃"><a href="#새로운-CSS-레이아웃" class="headerlink" title="새로운 CSS 레이아웃"></a>새로운 CSS 레이아웃</h1><ul><li><a href="http://www.yes24.com/24/goods/60715949" rel="external nofollow noopener noreferrer" target="_blank">새로운 CSS 레이아웃</a> - YES24<br><img src="/images/newCss/book_img.jpg" alt="새로운 CSS 레이아웃"></li><li>오픈채팅 프론트개발자방에서 추천 받은 책</li><li>구매 후 몇달만에 독서 완료</li></ul><h2 id="제-1장"><a href="#제-1장" class="headerlink" title="제 1장"></a>제 1장</h2><h3 id="float-문제"><a href="#float-문제" class="headerlink" title="float 문제"></a>float 문제</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.cards</span> <span class="selector-tag">li</span> &#123;</span><br><span class="line">  <span class="attribute">float</span>: left;</span><br><span class="line">  <span class="attribute">width</span>: <span class="built_in">calc</span>(33.333333333% - 20px);</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">10px</span> <span class="number">20px</span> <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: darkorange;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"cards"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>card1<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>테스트입니다.테스트입니다.테스트입니다.테스트입니다.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>card2<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>테스트입니다.테스트입니다.테스트입니다.테스트입니다.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>컨텐츠 추가<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>card3<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>테스트입니다.테스트입니다.테스트입니다.테스트입니다.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>card4<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>테스트입니다.테스트입니다.테스트입니다.테스트입니다.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>card5<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>테스트입니다.테스트입니다.테스트입니다.테스트입니다.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>card6<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>테스트입니다.테스트입니다.테스트입니다.테스트입니다.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p>height가 같은 요소일때는 문제가 발생하지 않지만 height값이 길어지는 경우 문제가 발생한다.</p><ul><li><code>card2</code>의 컨텐츠 내용이 추가되어 height가 길어질 경우</li><li>정상<br><img src="/images/newCss/float1.png" alt="float1"></li><li>문제<br><img src="/images/newCss/float2.png" alt="float2"></li></ul></li></ul><h3 id="float-문제-해결-방법"><a href="#float-문제-해결-방법" class="headerlink" title="float 문제 해결 방법"></a>float 문제 해결 방법</h3><ul><li><p><code>card1, card2, card3</code>과 <code>card4, card5, card6</code>을 각각 하나의 요소로 감싸고 clearfix 적용하기 각각 요소가 서로의 공간을 침범하지 않게 만든다.</p><ul><li>문제 : 마크업 구조를 변경해야 한다.</li></ul></li><li><p><code>float</code>대신 <code>display: inline-block</code>을 사용</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.cards</span> <span class="selector-tag">li</span> &#123;</span><br><span class="line">  <span class="comment">/*float: left;*/</span></span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">  <span class="attribute">width</span>: <span class="built_in">calc</span>(33.333333333% - 20px);</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">10px</span> <span class="number">20px</span> <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: darkorange;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>문제 : inline요소에는 공백을 그대로 유지한다는 특성을 가지고 있다.(공백을 유지 하지 않으면 inline요소는 띄어쓰기 없이 붙어서 표시) 따라서 공백유지떄문에 한 줄에 2개의 요소만 표시된다.(<code>margin</code>값 수정하거나, 마크업을 붙여서 작성하는 방법등을 이용하여 수정가능)</p></li></ul><p><img src="/images/newCss/float3.png" alt="float3"></p><ul><li><p><code>float</code>대신 <code>display: table</code>을 사용</p></li><li><p><code>display: table</code>를 사용해서 테이블 레이아웃의 형태로 변경한다. 자식 요소들도 <code>tr</code>요소처럼 <code>display: table-row</code>, <code>td</code>처럼 <code>display :table-cell</code>을 추가한다. 또한 각줄마다 요소로 감싸줘야한다. <code>vertical-align</code>으로 수직정렬 가능</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#wrap</span> &#123;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">900px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: antiquewhite;</span><br><span class="line">  <span class="attribute">display</span>: table;</span><br><span class="line">  <span class="attribute">border-spacing</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.cards</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: table-row;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.cards</span> <span class="selector-tag">li</span> &#123;</span><br><span class="line">  <span class="comment">/* float: left; */</span></span><br><span class="line">  <span class="comment">/* display: inline-block; */</span></span><br><span class="line">  <span class="attribute">display</span>: table-cell;</span><br><span class="line">  <span class="attribute">width</span>: <span class="built_in">calc</span>(33.333333333% - 20px);</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">10px</span> <span class="number">20px</span> <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: darkorange;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"wrap"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"cards"</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"cards"</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>문제 마크업 구조를 변경해야 함. 그리고 테이블의 줄과 칸은 margin이 적용되지 않아 <code>border-spacing</code>을 사용해야 한다.</li><li><img src="/images/newCss/float4.png" alt="float4"></li></ul></li></ul><h2 id="제-2장"><a href="#제-2장" class="headerlink" title="제 2장"></a>제 2장</h2><h3 id="CSS-아키텍처"><a href="#CSS-아키텍처" class="headerlink" title="CSS 아키텍처"></a>CSS 아키텍처</h3><ul><li><p>CSS 아키텍처는 <code>OOCSS, SMACSS, BEM</code> 등이 있는데 혼자 CSS를 작업하면 굳이 이런 방식을 과할 수가 있다. 여러명이서 하는 프로젝트라면 아키텍처의 필요성을 느낄 수 있다.</p></li><li><p>하지만 CSS 아키텍처의 CSS클래스 네임을 사용하다보면 CSS가 마크업가 더 강하게 결합되는 부작용이 존재한다.</p><ul><li><p>위치와 상관없이 클래스만으로 요소 선택 가능</p></li><li><p>하지만 아래와 같이 html의 양이 증가된다.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"menu"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Menu<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.menu</span> &#123;&#125;</span><br><span class="line"><span class="selector-class">.menu</span> <span class="selector-tag">ul</span> &#123;&#125;</span><br><span class="line"><span class="selector-class">.menu</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span> &#123;&#125;</span><br><span class="line"><span class="selector-class">.menu</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span> <span class="selector-tag">a</span> &#123;&#125;</span><br></pre></td></tr></table></figure></li><li><p>BEM 사용시</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"menu"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"menu__list"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"menu__item"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"menu__link"</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Menu<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.menu</span> &#123;&#125;</span><br><span class="line"><span class="selector-class">.menu__list</span> &#123;&#125;</span><br><span class="line"><span class="selector-class">.menu__item</span> &#123;&#125;</span><br><span class="line"><span class="selector-class">.menu__link</span> &#123;&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="전처리기와-후처리기"><a href="#전처리기와-후처리기" class="headerlink" title="전처리기와 후처리기"></a>전처리기와 후처리기</h3><ul><li>전처리기 : <code>LSES, SASS</code>와 같이 CSS가 아닌 언어로 CSS를 작성하면 CSS로 컴파일 해주는 도구</li><li>후처리기 : CSS 파일이 작성된 후에 적용된다. <code>AUTOPREFIXER</code>를 사용하면 구식 브라우저에 필요한 제조사 접두어를 추가</li><li>이러한 도구를 사용하면 시간을 상당히 아낄수 있다. 전처리기 같은 경우는 여러사람이 각자 맡은 부분을 작업하고 이 모든 파일을 취합해 하나로 컴파일하는 방식으로 많이 사용된다.</li><li>하지만 CSS 명세와 동떨어져 버려 새로운 CSS 신기술을 간과할 수있고 후처리기를 이용하여 불피요한 접두사를 추가할 수도 있다.</li></ul><h3 id="컴포넌트-우선-디자인"><a href="#컴포넌트-우선-디자인" class="headerlink" title="컴포넌트 우선 디자인"></a>컴포넌트 우선 디자인</h3><ul><li>아토믹 디자인 : 빈 페이지부터 시작해서 디자인을 완성해가는 대신 가장 작은 구성 요소부터 시작해서 점차 바깥으로 확장하면 디자인 할 것을 권장한다. 이 방식은 프론트 개발자가 1명인 팀에는 조금 과한 면이 있다.</li></ul><h3 id="프레임워크"><a href="#프레임워크" class="headerlink" title="프레임워크"></a>프레임워크</h3><ul><li>부트스트랩 : 디자이너, 개발자들이 최서한의 지식을 가지고 웹사이트를 만들 수 있게 해준다. 개성 있진 않지만 개발자가 만든 사이트처럼 끔찍하지는 않다.</li><li>모든 프레임워크에는 만든 사람의 의도와 요구 사항이 담겨 있고 그러한 의도와 요구 사항이 자신의 요구 사항과 일치할 수도 그렇지 않을 수도 있다.</li></ul><h3 id="기타"><a href="#기타" class="headerlink" title="기타"></a>기타</h3><ul><li>성능 : HTTP 아카이브는 2016년 12월에 웹 페이지 평균 다운로드 크기가 2.4MB 이상이라고 한다. 인터넷 속도가 느린 곳도 생각하여 속도도 염두에 두는 것이 좋다.</li><li>접근성 : 새로운 명세 덕분에 시각적인 표현 선수를 재배열 할 수 있게 된 만큼 이를 세심하게 주의를 기울여서 사용해야 한다.</li><li>자동으로 업데이트 되는 브라우저 : 크롬, 파폭 등 자동으로 업데이트 되는 브라우저가 많아졌으나 내부 정책 때문에 사용할 수 있는 브라우저가 정해진 곳이 여전히 존재한다. 추후 언젠가 업데이트를 대비해 코드를 추가로 작성하지 않고도 브라우저가 업데이트 될때 스스로 진화하는 듯 보이는 웹사이트를 제작해야 한다.</li></ul><h2 id="제-3장"><a href="#제-3장" class="headerlink" title="제 3장"></a>제 3장</h2><h3 id="CSS의-양식화-문맥"><a href="#CSS의-양식화-문맥" class="headerlink" title="CSS의 양식화 문맥"></a>CSS의 양식화 문맥</h3><ul><li><p><a href="https://drafts.CSSwg.org/CSS-display-3/#formatting-context" rel="external nofollow noopener noreferrer" target="_blank">https://drafts.CSSwg.org/CSS-display-3/#formatting-context</a></p></li><li><p>양식화 문맥이 다르면 다른 규칙에 따라 상자를 배치합니다. 예를 들어, 플렉스 양식화 문맥은 CSS3 FLEXBOX라는 플렉스 레이아웃 규칙에 따라 상자를 배치하고, 블록 양식화 문맥은 CSS2의 블록과 인라인 레이아웃 규칙에 따라 상자를 배치합니다.</p></li><li><p>블록 양식화 문맥(BFC) : 요소에 새로운 블록 양식화 문맥을 작성하면 그 <strong>요소의 자식 요소에 적용할 독립적인 레이아웃 환경</strong>을 만들 수 있다.</p></li><li><p>아래와 같은 조건을 만족하면 새로운 BFC가 만들어진다.</p><ul><li>root 요소일때</li><li>float값이 none이 아닐때</li><li>position: static, relative이 아닐때</li><li>overflow: visible이 아닐떄</li><li>display: table-cell, table-caption, inline-block, flex, inline-flex, grid 일때</li></ul></li><li><p><code>box</code>가 <code>float: left</code>인 상태일때</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">2px</span> solid orangered;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">float</span>: left;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">2px</span> solid <span class="number">#e5dbff</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>I am floated left.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/images/newCss/bfc1.png" alt="bfc1"></p><ul><li><code>box</code>가 플로팅되면 부모인 <code>container</code>가 줄어든다.</li><li>위에서 말한 <code>container</code>에 BFC를 만들어주면 <code>요소의 자식요소에 적용할 독립적인 레이아웃</code>을 만들면서 모든 것을 내부에 표현합니다. 따라서 <code>box</code>가 <code>container</code>안으로 들어갑니다.</li><li>BFC를 만들기 위해 <code>overflow: hidden</code>, <code>float:left</code>를 사용할 수 있다.</li><li><code>overflow: hidden</code> 적용 코드</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">2px</span> solid orangered;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/newCss/bfc2.png" alt="bfc2"></p><ul><li>하지만 <code>overflow: hidden</code>은 플로팅을 제거할 목적으로 만들어진 것이 아니라서 <code>box-shadow</code>가 짤리는 현상이 있다.</li><li>따라서 새로운 BFC를 만들 목적으로 나온 <code>display: flow-root</code>를 사용하면 된다. 이 값을 지원하는 브라우저에서는 새로우 BFC만 만들고 다른 부작용은 없다.</li></ul></li></ul><h3 id="흐름-내부과-외부"><a href="#흐름-내부과-외부" class="headerlink" title="흐름 내부과 외부"></a>흐름 내부과 외부</h3><ul><li><p>요소를 <code>floating</code>하거나 <code>position: absolute, fixed</code>하면 흐름에서 벗어난다.</p></li><li><p>블록수준 요소의 양식화 모델에 따르면 별다른 제약이 없는 경우 <strong>요소는 컨테이너의 너비만큼 넓어지고 새로운 줄에 표현</strong></p></li><li><p>인라인 요소는 <strong>공간이 있을 경우 다른 요소 바로 뒤에 표시</strong></p></li><li><p><del>플로팅된 요소는 블록 수준의 요소를 만날 때까지 위로 이동하고</del>(모르겠다) 그 뒤에 요소들은 플로팅된 요소 옆으로 늘어섭니다.</p></li><li><p>블록요소 텍스트는 플로팅 된 요소 주변으로 배치되고 배경색은 너비만큼 차지한다.</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">2px</span> solid <span class="number">#d0bfff</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">float</span>: left;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">2px</span> solid <span class="number">#d0bfff</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box</span> &gt; <span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: khaki;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.container</span> &gt; <span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: orange;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>I am floated left. I am out of flow.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    I am a paragraph of text inside the container. I am in-flow. My text wraps</span><br><span class="line">    around the float but my background color extends behind the floated item.</span><br><span class="line">  <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/images/newCss/bfc3.png" alt="bfc3"></p></li></ul><h3 id="플렉스박스"><a href="#플렉스박스" class="headerlink" title="플렉스박스"></a>플렉스박스</h3><ul><li><p>3개의 목록을 가진 요소에 <code>display: flex</code>를 설정하면 3개의 목록이 <code>flex-item</code>으로 바뀐다. flexitem은 기본값으로 한줄로 배열되고 플렉스 컨테이너 높이만큼 길이가 늘어난다. 모든 아이템은 그안에 컨텐츠의 길이와 상관없이 높이가 똑같아진다.</p></li><li><p>목록이 추가되면 <code>min-content</code>로 정해진 너비보다 작아질 수 없으므로 플렉스 컨테이너를 벗어나게 된다. <code>min-content</code>는 단어중 가장 긴 것을 기준으로 한다.<br><img src="/images/newCss/flex1.png" alt="flex1"></p></li><li><p>이럴땐 <code>flex-wrap: wrap;</code>을 사용하면 컨텐츠 길이만큼 늘어나서 1줄로 나오게 된다.<br><img src="/images/newCss/flex2.png" alt="flex2"></p></li><li><p>줄바꿈을 하기 위해서는 플렉스 아이템에도 <code>flex</code>속성을 추가한다. <code>flex: 1 1 200px;</code> 너비가 최소 200px로 맞춰져서 200px이하로 될 경우 줄바꿈이 된다. flex 관련은 추후 설명<br><img src="/images/newCss/flex3.png" alt="flex3"></p></li><li><p>만약 1개라도 목록이 삭제되면 그리드 효과는 사라지고 삭제된 자리는 나머지 목록이 채웁니다. 다음 줄로 넘어가면 새로운 줄이 플렉스 컨테이너가 됩니다. column도 마찬가지 즉, 플렉스 아이템이 다음 칼럼으로 넘어가면 새로운 칼럼이 플렉스 컨테이너가 됩니다. 이는 곧 <strong>각 줄마다 개별적으로 사용 가능한 공간을 할당한다는 뜻입니다. 플렉스박스는 바로 위나 아래에 있는 다른 플렉스 박스와 선을 맞추어 정렬하지 않습니다. 이를 가리켜 1차원 레이아웃이라고 부릅니다.</strong><br><img src="/images/newCss/flex4.png" alt="flex4"></p></li><li><p>플렉스 박스가 그리드처럼 동작하게 하려면 유연성을 제한해야 합니다. 1장에서 플롯 기반 레이아웃을 만들려면 <code>flex-grow, flex-shrink 값을 0으로 변경하고 flex-basis: auto</code>로 설정합니다. 이 설정은 플렉스 아이템에 주어진 퍼센트(width) 너비 이상으로 커지거나 줄어들지 않습니다. 다시 말해 한 줄에 플렉스 아이템이 2개밖에 없더라도 나머지 공간을 다 차지하기 위해 넓어지지 않습니다. float을 사용한 그리드처럼 각 플렉스 아이템 사이의 간격도 포함해야 합니다.<br><img src="/images/newCss/flex5.png" alt="flex5"></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.cards</span> <span class="selector-tag">li</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="built_in">calc</span>(33.333% - 20px);</span><br><span class="line">  <span class="attribute">flex</span>: <span class="number">0</span> <span class="number">0</span> auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="그리드-레이아웃"><a href="#그리드-레이아웃" class="headerlink" title="그리드 레이아웃"></a>그리드 레이아웃</h3><ul><li><p>이 명세는 2차원 레이아웃을 다루고 있다. 즉, row, column을 동시에 제어하고 배치할 수 있다. <code>display: grid</code>가 적용되어잇고 <code>grid-template-columns: 1fr 1fr 1fr</code>로 3개의 column을 생성하고 새로운 단위인 <code>fr</code>를 이용해 사용 가능한 공간을 3개로 나누되 균등한 비율로 나누었다.</p></li><li><p>별도로 너비 설정 안해도 되고, <code>margin</code> 대신 <code>grid-gap</code>을 이용</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.cards</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">list-style</span>: none;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="number">1</span>fr <span class="number">1</span>fr <span class="number">1</span>fr;</span><br><span class="line">  <span class="attribute">grid-gap</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.cards</span> <span class="selector-tag">li</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#e5dbff</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#d0bfff</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"example"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"cards"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Card 1<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        These cards have been laid out using grid layout. By setting</span><br><span class="line">        <span class="tag">&lt;<span class="name">code</span>&gt;</span>display: grid<span class="tag">&lt;/<span class="name">code</span>&gt;</span> on the parent, all direct children become</span><br><span class="line">        grid items.</span><br><span class="line">      <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Card 2<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        These cards have been laid out using grid layout. By setting</span><br><span class="line">        <span class="tag">&lt;<span class="name">code</span>&gt;</span>display: grid<span class="tag">&lt;/<span class="name">code</span>&gt;</span> on the parent, all direct children become</span><br><span class="line">        grid items.</span><br><span class="line">      <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Card 3<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        These cards have been laid out using grid layout. By setting</span><br><span class="line">        <span class="tag">&lt;<span class="name">code</span>&gt;</span>display: grid<span class="tag">&lt;/<span class="name">code</span>&gt;</span> on the parent, all direct children become</span><br><span class="line">        grid items.</span><br><span class="line">      <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Card 4<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        These cards have been laid out using grid layout. By setting</span><br><span class="line">        <span class="tag">&lt;<span class="name">code</span>&gt;</span>display: grid<span class="tag">&lt;/<span class="name">code</span>&gt;</span> on the parent, all direct children become</span><br><span class="line">        grid items.</span><br><span class="line">      <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Card 5<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        These cards have been laid out using grid layout. By setting</span><br><span class="line">        <span class="tag">&lt;<span class="name">code</span>&gt;</span>display: grid<span class="tag">&lt;/<span class="name">code</span>&gt;</span> on the parent, all direct children become</span><br><span class="line">        grid items.</span><br><span class="line">      <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/images/newCss/grid1.png" alt="grid1"></p><ul><li><p>그리드를 사용한 아이템 배치</p></li><li><p>오른쪽으로 읽는 언어(LTR), 왼쪽으로 읽는 언어(RTL)에 따라 번호의 순서가 달라진다.</p></li><li><p><code>grid-column, grid-row</code>를 사용해 2차원 그리드의 장점인 row, column영역 조절이 가능하다.</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.card1</span> &#123;</span><br><span class="line">  <span class="attribute">grid-column</span>: <span class="number">1</span> / <span class="number">3</span>; <span class="comment">/*1컬럼부터 2컬럼까지*/</span></span><br><span class="line">  <span class="attribute">grid-row</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.card2</span> &#123;</span><br><span class="line">  <span class="attribute">grid-column</span>: <span class="number">3</span>; <span class="comment">/*3컬럼만*/</span></span><br><span class="line">  <span class="attribute">grid-row</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.card3</span> &#123;</span><br><span class="line">  <span class="attribute">grid-column</span>: <span class="number">1</span>; <span class="comment">/*1컬럼만*/</span></span><br><span class="line">  <span class="attribute">grid-row</span>: <span class="number">2</span> / <span class="number">4</span>; <span class="comment">/*2로우에서 3로우까지*/</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.card4</span> &#123;</span><br><span class="line">  <span class="attribute">grid-column</span>: <span class="number">2</span> / <span class="number">4</span>; <span class="comment">/* 2컬럼에서 3컬럼까지 */</span></span><br><span class="line">  <span class="attribute">grid-row</span>: <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.card5</span> &#123;</span><br><span class="line">  <span class="attribute">grid-column</span>: <span class="number">2</span> / <span class="number">4</span>;</span><br><span class="line">  <span class="attribute">grid-row</span>: <span class="number">3</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/newCss/grid2.png" alt="grid2"></p></li><li><p>그리드 아이템에 이름을 지어줄 수 있다.</p></li><li><p>위와 같은 결과 (<code>.</code>은 공백을 나타낸다)</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.card1</span> &#123; <span class="attribute">grid-area</span>: a; &#125;</span><br><span class="line"><span class="selector-class">.card2</span> &#123; <span class="attribute">grid-area</span>: b; &#125;</span><br><span class="line"><span class="selector-class">.card3</span> &#123; <span class="attribute">grid-area</span>: c; &#125;</span><br><span class="line"><span class="selector-class">.card4</span> &#123; <span class="attribute">grid-area</span>: d; &#125;</span><br><span class="line"><span class="selector-class">.card5</span> &#123; <span class="attribute">grid-area</span>: e; &#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.cards</span> &#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="selector-tag">grid-template-area</span>:</span><br><span class="line">  "<span class="selector-tag">a</span> <span class="selector-tag">a</span> <span class="selector-tag">b</span>"</span><br><span class="line">  ". <span class="selector-tag">d</span> <span class="selector-tag">d</span>"</span><br><span class="line">  "<span class="selector-tag">c</span> <span class="selector-tag">e</span> <span class="selector-tag">e</span>"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="기타-1"><a href="#기타-1" class="headerlink" title="기타"></a>기타</h3><ul><li><p><code>shape-out-side</code></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.example</span> <span class="selector-tag">img</span> &#123;</span><br><span class="line">  <span class="attribute">float</span>: left;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">shape-outside</span>: <span class="built_in">circle</span>(50%);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/newCss/shapeOutside.png" alt="shapeOutside"></p></li><li><p><code>position: sticky</code></p><ul><li>화면이 해당 영역으로 들어오면 <code>fixed</code> 속성과 같이 고정됨. 영역 들어오기전에는 <code>static</code>으로 동작<br><img src="/images/newCss/sticky.png" alt="sticky"></li></ul></li><li><p>멀티 칼럼 레이아웃</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.example</span> &#123;</span><br><span class="line">  <span class="attribute">column-count</span>: <span class="number">3</span>;</span><br><span class="line">  <span class="attribute">column-width</span>: <span class="number">300px</span>; <span class="comment">/*화면의 너비가 줄어들면서 컬럼의 너비가 300px 이하가 되면 끝에 있는것부터 없어지고 앞에꺼랑 합쳐진다.*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/newCss/multiColumn.png" alt="multiColumn"></p></li></ul><h2 id="제-4장"><a href="#제-4장" class="headerlink" title="제 4장"></a>제 4장</h2><h3 id="플렉스-아이템-배치"><a href="#플렉스-아이템-배치" class="headerlink" title="플렉스 아이템 배치"></a>플렉스 아이템 배치</h3><ul><li><p>플렉스 아이템이 컨테이너 height 만큼 커지는 이유는 기본값이 <code>stretch</code>이기 떄문이다.</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.cards</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> -<span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">list-style</span>: none;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="comment">/* align-items: stretch; 기본값 */</span></span><br><span class="line">  <span class="comment">/*align-items: flex-start*/</span></span><br><span class="line">  <span class="comment">/*align-items: flex-end*/</span></span><br><span class="line">  <span class="attribute">flex-wrap</span>: wrap;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/newCss/flexitem1.png" alt="flexitem1"></p><hr><p><img src="/images/newCss/flexitem2.png" alt="flexitem2"></p><hr><p><img src="/images/newCss/flexitem3.png" alt="flexitem3"></p></li><li><p>개별적으로 원하면 플렉스 아이템에 <code>align-self</code>를 적용하면 된다.</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.cards</span> <span class="selector-tag">li</span><span class="selector-pseudo">:first-child</span> &#123;</span><br><span class="line">  <span class="attribute">align-self</span>: flex-end;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/newCss/flexitem4.png" alt="flexitem4"></p></li><li><p>아이템은 교차축(cross-axis)에서 이루어집니다. 수직</p></li><li><p><code>flex-direction: column</code>으로 변경하면 교차축이 수평이 되어 아래와 같이 된다.</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.cards</span> &#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="selector-tag">flex-direction</span>: <span class="selector-tag">column</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/newCss/flexitem5.png" alt="flexitem5"></p></li></ul><h3 id="그리드-아이템-배치"><a href="#그리드-아이템-배치" class="headerlink" title="그리드 아이템 배치"></a>그리드 아이템 배치</h3><ul><li><p>그리드 아이템도 마찬가지로 <code>align-items: stretch</code>가 기본값이다.</p></li><li><p>개별적으로 원하면 역시 <code>align-self</code>를 사용하면 된다.</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.cards</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">list-style</span>: none;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="built_in">repeat</span>(4, 1fr);</span><br><span class="line">  <span class="attribute">grid-template-rows</span>: <span class="built_in">repeat</span>(3, 100px);</span><br><span class="line">  <span class="attribute">grid-template-areas</span>:</span><br><span class="line">    <span class="string">"a a a b"</span></span><br><span class="line">    <span class="string">"a a a b"</span></span><br><span class="line">    <span class="string">"c d d d"</span>;</span><br><span class="line">  <span class="attribute">grid-gap</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">align-items</span>: start;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.one</span> &#123;</span><br><span class="line">  <span class="attribute">grid-area</span>: a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.two</span> &#123;</span><br><span class="line">  <span class="attribute">grid-area</span>: b;</span><br><span class="line">  <span class="attribute">align-self</span>: stretch;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.three</span> &#123;</span><br><span class="line">  <span class="attribute">grid-area</span>: c;</span><br><span class="line">  <span class="attribute">align-self</span>: flex-end;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.four</span> &#123;</span><br><span class="line">  <span class="attribute">grid-area</span>: d;</span><br><span class="line">  <span class="attribute">align-self</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.cards</span> <span class="selector-tag">li</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#e3fafc</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#99e9f2</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/newCss/griditem1.png" alt="griditem1"></p></li><li><p>메인 축을 정렬하려면 <code>justify-items</code>를 사용하고 개별적으로는 <code>justify-self</code>를 설정한다. Item4를 <code>d</code>로 설정하고 <code>stretch</code>를 적용했다.</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.cards</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">list-style</span>: none;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="built_in">repeat</span>(4, 1fr);</span><br><span class="line">  <span class="attribute">grid-template-rows</span>: <span class="built_in">repeat</span>(3, 100px);</span><br><span class="line">  <span class="attribute">grid-template-areas</span>:</span><br><span class="line">    <span class="string">"a a a b"</span></span><br><span class="line">    <span class="string">"a a a b"</span></span><br><span class="line">    <span class="string">"c d d d"</span>;</span><br><span class="line">  <span class="attribute">grid-gap</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">justify-items</span>: end;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.four</span> &#123;</span><br><span class="line">  <span class="attribute">grid-area</span>: d;</span><br><span class="line">  <span class="attribute">justify-self</span>: stretch;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="플렉스-아이템-정렬"><a href="#플렉스-아이템-정렬" class="headerlink" title="플렉스 아이템 정렬"></a>플렉스 아이템 정렬</h3><ul><li><p>플렉스박스에는 축이 1개밖에 없고 주축(main axis)에 여러 아이템을 둘 수 있기 때문에 <code>justify-items</code>, <code>justify-self</code>속성을 적용하지 않는다.</p></li><li><p>가끔 주축 위에 아이템을 일정한 간격으로 배치하고 싶을때는 플렉스 컨테이너 전체에 영향을 주는 <code>justify-content</code>를 사용한다. 주축 기준이고 <code>flex-direction</code>이 <code>row</code>라면 가로줄, <code>column</code>이라면 세로줄이다. 초기값은 <code>flex-start</code> 그래서 <code>display: flex</code>주고 아무것도 설정안하면 시작 부분에 늘어선다.</p></li><li><p>반대로 <code>flex-end</code>를 주면 컨테이너 끝에 늘어선다.</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.cards</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> -<span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">list-style</span>: none;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">justify-content</span>: flex-end;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">50vh</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.cards</span> <span class="selector-tag">li</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#e3fafc</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#99e9f2</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">10px</span> <span class="number">20px</span> <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"example"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"cards"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>Item 1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>Item 2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>Item 3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>Item 4<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/images/newCss/flexitem7.png" alt="flexitem7"></p></li><li><p><code>space-between</code>: 양끝 붙고 아이템 사이 일정한 간격<br><img src="/images/newCss/flexjustify1.png" alt="flexjustify1"></p></li><li><p><code>space-around</code>: 양쪽 동일한 마진값<br><img src="/images/newCss/flexjustify2.png" alt="flexjustify2"></p></li><li><p><code>space-evenly</code>: 모든 공백 균등하게 배분<br><img src="/images/newCss/flexjustify3.png" alt="flexjustify3"></p></li></ul><h3 id="플렉스-사용한-가운데-정렬"><a href="#플렉스-사용한-가운데-정렬" class="headerlink" title="플렉스 사용한 가운데 정렬"></a>플렉스 사용한 가운데 정렬</h3><ul><li><p>플렉스를 사용해 가운데 정렬하기(이전에는 position: absolute를 사용하거나 table을 이용한 방법 등)</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.example</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">justify-content </span>: center;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"example"</span>&gt;</span>가운데 할 요소<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="플렉스박스의-align-content-속성"><a href="#플렉스박스의-align-content-속성" class="headerlink" title="플렉스박스의 align-content 속성"></a>플렉스박스의 <code>align-content</code> 속성</h3><ul><li><p>플렉스박스의 <code>align-content</code>는 교차죽(Cross-axis)에서 동작, 아래와 같을 경우 동작</p><ul><li><code>flex-wrap</code> 속성의 값이 <code>wrap</code>일 때</li><li>아이템을 배치하기 위해 필요한 공간보다 컨테이너가 길 때</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.cards</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">flex-wrap </span>:wrap;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">50vh</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.cards</span> <span class="selector-tag">li</span> &#123;</span><br><span class="line">  <span class="attribute">flex</span>: <span class="number">1</span> <span class="number">1</span> <span class="number">250px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>기본값은 <code>strecth</code><br><img src="/images/newCss/flexalign1.png" alt="flexalign1"></p></li><li><p><code>align-content: space-between</code> : 처음과 끝에 붙고(사용할 수 있는 공간 모두 사용) 중간 공간 분배</p><p><img src="/images/newCss/flexalign2.png" alt="flexalign2"></p></li></ul><h3 id="그리드-트랙과-배치와-정렬"><a href="#그리드-트랙과-배치와-정렬" class="headerlink" title="그리드 트랙과 배치와 정렬"></a>그리드 트랙과 배치와 정렬</h3><ul><li><code>align-content</code>, <code>justify-content</code> 속성은 그리드 레이아웃의 트랙에 영향을 줍니다. 둘다 <code>space-between</code>을 사용하면 컨테이너 너비와 높이를 모두 채울 수 있습니다.</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.cards</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">list-style</span>: none;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="built_in">repeat</span>(4, 15%);</span><br><span class="line">  <span class="attribute">grid-template-rows</span>: <span class="built_in">repeat</span>(3, 100px);</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">50vh</span>;</span><br><span class="line">  <span class="attribute">grid-template-areas</span>:</span><br><span class="line">    <span class="string">"a a a b"</span></span><br><span class="line">    <span class="string">"a a a b"</span></span><br><span class="line">    <span class="string">"c d d d"</span>;</span><br><span class="line">  <span class="attribute">grid-gap</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="comment">/*align-content: space-between;*/</span></span><br><span class="line">  <span class="comment">/*justify-content: space-between;*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/newCss/gridalign1.png" alt="gridalign1"></p><ul><li><code>space-between</code><br><img src="/images/newCss/gridalign2.png" alt="gridalign2"></li></ul><h3 id="플렉스-자동마진"><a href="#플렉스-자동마진" class="headerlink" title="플렉스 자동마진"></a>플렉스 자동마진</h3><ul><li>1차원이라서 <code>justify-items</code>가 적용되지 않는다. 하지만 같은 줄에 플렉스 박스 1개만 다른 방식으로 배치하고 싶을때는 자동마진을 사용한다.</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.cards</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> -<span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">list-style</span>: none;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.cards</span> <span class="selector-tag">li</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#e3fafc</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#99e9f2</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">10px</span> <span class="number">20px</span> <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.cards</span> <span class="selector-tag">li</span><span class="selector-pseudo">:last-child</span> &#123;</span><br><span class="line">  <span class="attribute">margin-left</span>: auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"cards"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>Item 1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>Item 2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>Item 3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>Item 4<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/images/newCss/automargin.png" alt="automargin"></p><h3 id="논리적-속성과-물리적-속성"><a href="#논리적-속성과-물리적-속성" class="headerlink" title="논리적 속성과 물리적 속성"></a>논리적 속성과 물리적 속성</h3><ul><li>물리적 속성 : <code>left, right, top, bottom</code> 어떤 요소가 화면에서 물리적으로 어디에 위치하는지 알려준다.</li><li>논리적 속성 : 물리적 속성의 경우 설정된 글쓰기 모드(RTL, LTR)에 따라 문제가 발생하므로 논리적인 속성을 사용한다. <code>start, end</code>와 같은 것들</li></ul><h2 id="5장"><a href="#5장" class="headerlink" title="5장"></a>5장</h2><ul><li>flex vs grid</li><li>flex도 유연하게 줄바꿈이 되지만 gird처럼 2번째줄이 1번째줄하고 카드가 맞지 않는다. 맞게 하려면 grid를 써야 한다.</li></ul><p><img src="/images/newCss/flexgrid1.png" alt="flexgrid1"></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.cards</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> -<span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">list-style</span>: none;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="built_in">repeat</span>(3, 1fr);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/newCss/flexgrid2.png" alt="flexgrid2"></p><ul><li>flex는 컨테이너 너비가 늘어날수록 한 줄에 표시되는 아이템도 증가</li><li>grid로 flex처럼 너비가 늘어날수록 표시되는 아이템을 증가하려면 <code>repeat()</code>표기법에서 <code>auto-fill</code>을 사용해야한다.</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.cards</span> &#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="selector-tag">grid-template-columns</span>: <span class="selector-tag">repeat</span>(<span class="selector-tag">auto-fill</span>, 200<span class="selector-tag">px</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>auto-fill</code> : 너비가 허용하는 한 최대한 많이</li><li>고정된 컬럼 너비를 지정(200px)했으므로 200px로 나누어지지 않으면 줄 끝에 공백이 생긴다.</li><li>이 문제는 <code>minmax()</code>로 해결할 수 있다. 최소, 최대 너비를 지정할 수 있다. <code>minmax(200px, 1fr)</code>은 200px 너비로 칼럼이 몇개 들어 갈 수 있는지 계산하고 남은 공간을 균등하게 배분하는데 이떄 칼럼의 최대 크기는 <code>1fr</code>이 된다.</li></ul><p><img src="/images/newCss/flexgrid3.png" alt="flexgrid3"></p><h3 id="auto-fill-vs-auto-fit"><a href="#auto-fill-vs-auto-fit" class="headerlink" title="auto-fill vs auto-fit"></a>auto-fill vs auto-fit</h3><ul><li>auto-fill : 그리드 아이템의 개수가 부족해서 끝 쪽에 빈 공간이 생겨도 빈 채로 남겨둔다.</li><li>auto-fit : 그리드 아이템의 개수가 부족해서 끝 쪽에 빈 공간이 생기면 남겨두지 않고 각 칼럼에 균등하게 배분합니다.</li></ul><p><img src="/images/newCss/autofill.png" alt="autofill"><br><img src="/images/newCss/autofit.png" alt="autofit"></p><h3 id="flex-속성을-사용한-크기-조절"><a href="#flex-속성을-사용한-크기-조절" class="headerlink" title="flex 속성을 사용한 크기 조절"></a>flex 속성을 사용한 크기 조절</h3><ul><li><code>flex-grow</code> : <code>flex-basis</code>에 설정한 크기보다 커질 수 있는 설정 <code>1</code>이라면 플렉스 아이템은 플렉스 컨테이너에 여유 공간이 있다면 200px보다 커집니다.</li><li><code>flex-shrink</code> : <code>flex-basis</code>에 설정한 크기보다 작아질 수 있는 설정. 아이템을 줄 바꿈하지 않는 500px 컨테이너 안에 <code>flex-basis</code> : 200px로 설정된 플렉스 아이템 3개가 있을 경우 <code>flex-shrink</code>가 0인 경우 컨테이너 영역을 벗어나게 된다.</li><li><code>flex-basis</code> : 플렉스 아이템의 너비나 높이를 설정할때 사용 200px로 설정하면 각 플렉스 아이템에 200px 크기의 공간 할당</li></ul><h3 id="flex-축약-표현"><a href="#flex-축약-표현" class="headerlink" title="flex 축약 표현"></a>flex 축약 표현</h3><ul><li><code>flex</code> : <code>flex-grow</code> <code>flex-shrink</code> <code>flex-basis</code><ul><li><code>flex: 0 0 200px</code></li></ul></li></ul><p><img src="/images/newCss/flexitems.png" alt="flexitems"></p><ul><li><code>flex-basis</code>는 기본 값으로 content너비를 가지는거나 <code>auto</code>를 주게되면 <code>width</code>값을 사용한다.</li><li>기본적으로 <code>auto</code>를 사용하는 것이 좋다.</li></ul><h3 id="grid-fr"><a href="#grid-fr" class="headerlink" title="grid fr"></a>grid fr</h3><ul><li><code>fr</code>은 균등하게 공간을 배분하는 속성이며, <code>flow-grow</code>처럼 사용 가능한 공간의 분배 비율을 정할때 많이 사용한다.</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.example</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: grid;</span><br><span class="line">    <span class="attribute">grid-template-columns</span>: <span class="number">1</span>fr <span class="number">4</span>fr <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">grid-gap</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/newCss/gridfr.png" alt="gridfr"></p><h3 id="grid-레이아웃에서-auto사용"><a href="#grid-레이아웃에서-auto사용" class="headerlink" title="grid 레이아웃에서 auto사용"></a>grid 레이아웃에서 <code>auto</code>사용</h3><ul><li>grid 레이아웃에서 <code>grid-template-columns</code>에서 auto도 flex-basis의 <code>auto</code>랑 비슷하다.</li><li>card2에 <code>width: 300px</code>로 설정해서 너비가 300px이고 나머지 부분들은 남은 공간을 반으로 분배해서 차지한다.<br><img src="/images/newCss/gridauto.png" alt="gridauto"></li></ul><h3 id="minmax-에서-auto-적용하기"><a href="#minmax-에서-auto-적용하기" class="headerlink" title="minmax() 에서 auto 적용하기"></a>minmax() 에서 auto 적용하기</h3><ul><li><code>minmax()</code>에 auto를 적용하면 컨텐츠 크기에 맞추어 조정된다. 아래는 최소 높이를 보장하면서 콘텐츠가 예상보다 길어졌을때 자동으로 높이가 맞춰지는 코드이다.</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.cards</span> &#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">list-style</span>: none;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-gap</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="number">1</span>fr <span class="number">1</span>fr <span class="number">1</span>fr;</span><br><span class="line">  <span class="attribute">grid-auto-rows</span>: <span class="built_in">minmax</span>(150px, auto);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/newCss/gridauto2.png" alt="gridauto2"><br><img src="/images/newCss/gridauto3.png" alt="gridauto3"></p><h2 id="6장"><a href="#6장" class="headerlink" title="6장"></a>6장</h2><h3 id="flex-direction"><a href="#flex-direction" class="headerlink" title="flex-direction"></a>flex-direction</h3><ul><li>플렉스 박스의 흐름 방향을 설정할 수 있다.<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">flex-direction</span>: <span class="selector-tag">row</span>;</span><br><span class="line"><span class="selector-tag">flex-direction</span>: <span class="selector-tag">row-reverse</span>;</span><br><span class="line"><span class="selector-tag">flex-direction</span>: <span class="selector-tag">column</span>;</span><br><span class="line"><span class="selector-tag">flex-direction</span>: <span class="selector-tag">column-reverse</span>;</span><br></pre></td></tr></table></figure></li></ul><h3 id="grid-auto-flow"><a href="#grid-auto-flow" class="headerlink" title="grid-auto-flow"></a>grid-auto-flow</h3><ul><li>그리드 레이아웃의 흐름 방향을 설정할 수 있다.<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">grid-auto-flow</span>: <span class="selector-tag">row</span>;</span><br><span class="line"><span class="selector-tag">grid-auto-flow</span>: <span class="selector-tag">row-reverse</span>;</span><br><span class="line"><span class="selector-tag">grid-auto-flow</span>: <span class="selector-tag">column</span>;</span><br><span class="line"><span class="selector-tag">grid-auto-flow</span>: <span class="selector-tag">column-reverse</span>;</span><br></pre></td></tr></table></figure></li></ul><h3 id="그리드-자동-배치"><a href="#그리드-자동-배치" class="headerlink" title="그리드 자동 배치"></a>그리드 자동 배치</h3><ul><li><p><code>grid-column</code>를 사용해 시작위치는 자동이고 끝위치를 <code>span 2</code>로 설정해서 column 2개를 차지하게 한다.</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.cards</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">grid-gap</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">list-style</span>: none;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="built_in">repeat</span>(auto-fill, minmax(250px, 1fr));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.cards</span> <span class="selector-tag">li</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#edf2ff</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#bac8ff</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.cards</span> <span class="selector-tag">a</span><span class="selector-pseudo">:link</span>,</span><br><span class="line"><span class="selector-class">.cards</span> <span class="selector-tag">a</span><span class="selector-pseudo">:visited</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#4263eb</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.cards</span> <span class="selector-class">.landscape</span> &#123;</span><br><span class="line">  <span class="attribute">grid-column</span>: auto / span <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>width 넉넉할때<br><img src="/images/newCss/gridspan1.png" alt="gridspan1"></p></li><li><p>width 부족할떄<br><img src="/images/newCss/gridspan2.png" alt="gridspan2"></p></li><li><p>width 부족할때 남은 공간 없이 채우기</p></li><li><p>논리적인 순서가 필요없을때 사용(tab 접근시 웹접근성 문제)</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.cards</span> &#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="selector-tag">grid-auto-flow</span>: <span class="selector-tag">dense</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/newCss/gridspan3.png" alt="gridspan3"></p></li></ul><h3 id="플렉스박스와-그리드의-order-속성"><a href="#플렉스박스와-그리드의-order-속성" class="headerlink" title="플렉스박스와 그리드의 order 속성"></a>플렉스박스와 그리드의 <code>order</code> 속성</h3><pre><code>-   `order` 속성을 이용해 아이템의 순서를 변경할 수 있다.-   `0`이 가장 순위가 낮다. 기본값<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.cards</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> -<span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">list-style</span>: none;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.cards</span> <span class="selector-tag">li</span><span class="selector-pseudo">:nth-child(1)</span> &#123;</span><br><span class="line">  <span class="attribute">order</span>: <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.cards</span> <span class="selector-tag">li</span><span class="selector-pseudo">:nth-child(2)</span> &#123;</span><br><span class="line">  <span class="attribute">order</span>: <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.cards</span> <span class="selector-tag">li</span><span class="selector-pseudo">:nth-child(3)</span> &#123;</span><br><span class="line">  <span class="attribute">order</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Card 1<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>These cards have been laid out using flexbox. By setting <span class="tag">&lt;<span class="name">code</span>&gt;</span>display: flex<span class="tag">&lt;/<span class="name">code</span>&gt;</span> on the parent, all direct children become flex items.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>This card has some extra content in it, making it taller than the others.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Card 2<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>These cards have been laid out using flexbox. By setting <span class="tag">&lt;<span class="name">code</span>&gt;</span>display: flex<span class="tag">&lt;/<span class="name">code</span>&gt;</span> on the parent, all direct children become flex items.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- &lt;li&gt; --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Card 3<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>These cards have been laid out using flexbox. By setting <span class="tag">&lt;<span class="name">code</span>&gt;</span>display: flex<span class="tag">&lt;/<span class="name">code</span>&gt;</span> on the parent, all direct children become flex items.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br></pre></td></tr></table></figure>![order](/images/newCss/order.png)</code></pre><h3 id="마크업-‘구조-단순화’의-위험성"><a href="#마크업-‘구조-단순화’의-위험성" class="headerlink" title="마크업 ‘구조 단순화’의 위험성"></a>마크업 ‘구조 단순화’의 위험성</h3><ul><li><p>예를 들면 그리드를 사용해 어떤 콘텐츠를 표현하고 이 콘텐츠 안에 <code>ul</code>요소를 사용한 목록이 있다. <code>ul</code> 안에 요소들도 그리드 레이아웃을 하고 싶을떄는 다시 <code>ul</code>에 새로운 그리드 컨테이너를 만들어야 한다.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"grid"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>blah<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>blah<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>list1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>list2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>list3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>blah<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>하지만 귀찮으니 <code>ul</code>안에 있는것들도 인접한 태그로 만들자라는 생각을 하게 되는데 이렇게 되는 순간 논리적인 코드가 망가지게 된다.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"grid"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>blah<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>blah<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>list1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>list2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>list3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>blah<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>해결책으로는 <code>subgird</code>, <code>display: contents</code>가 있다. <code>subgrid</code>아직 논의중이므로 <code>display: contents</code>를 알아보자.</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.cards</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-gap</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="built_in">repeat</span>(auto-fill, minmax(200px, 1fr));</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.cards</span> <span class="selector-tag">ul</span> &#123;</span><br><span class="line">    <span class="attribute">list-style</span>: none;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">    /* display: contents; */ 이부분을 주석 풀면 2번째 이미지처럼 된다.</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.cards</span> <span class="selector-tag">li</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#bac8ff</span>;</span><br><span class="line">    <span class="attribute">border</span>:<span class="number">1px</span> solid <span class="number">#fff</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"cards"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Card 1<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Card 2<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Card 3<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>List item 1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>List item 2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>List item 3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/images/newCss/contents1.png" alt="contents1"><br><img src="/images/newCss/contents2.png" alt="contents2"></p></li></ul><h2 id="7장-8장"><a href="#7장-8장" class="headerlink" title="7장, 8장"></a>7장, 8장</h2><ul><li>현재 기술 스펙 내용보단 미래에 대한 내용과 우리가 대처 해야되는 방향에 대한 글이므로 추후 정리할 예정이다.</li></ul><h2 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h2><ul><li>FLEX, GRID에 대해 자세하게 알게 되었다. 기존에는 사용할 일이 없어서 개인 연습으로 간단하게 해봤는데 이 책을 통해 다양하고 깊게 알 수 있게 되었다. 모바일부터 차근차근 적용해가면서 내 스타일대로 만드는게 목표다.</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;새로운-CSS-레이아웃&quot;&gt;&lt;a href=&quot;#새로운-CSS-레이아웃&quot; class=&quot;headerlink&quot; title=&quot;새로운 CSS 레이아웃&quot;&gt;&lt;/a&gt;새로운 CSS 레이아웃&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.yes2
      
    
    </summary>
    
      <category term="CSS" scheme="https://shldhee.github.io/categories/CSS/"/>
    
    
      <category term="CSS" scheme="https://shldhee.github.io/tags/CSS/"/>
    
      <category term="FLEX" scheme="https://shldhee.github.io/tags/FLEX/"/>
    
      <category term="GRID" scheme="https://shldhee.github.io/tags/GRID/"/>
    
      <category term="CSS3" scheme="https://shldhee.github.io/tags/CSS3/"/>
    
      <category term="LAYOUT" scheme="https://shldhee.github.io/tags/LAYOUT/"/>
    
      <category term="THENEWCSSLAYOUT" scheme="https://shldhee.github.io/tags/THENEWCSSLAYOUT/"/>
    
      <category term="새로운 CSS 레이아웃" scheme="https://shldhee.github.io/tags/%EC%83%88%EB%A1%9C%EC%9A%B4-CSS-%EB%A0%88%EC%9D%B4%EC%95%84%EC%9B%83/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript - DOM이란?</title>
    <link href="https://shldhee.github.io/2018/04/08/DOM/"/>
    <id>https://shldhee.github.io/2018/04/08/DOM/</id>
    <published>2018-04-07T15:54:31.000Z</published>
    <updated>2021-11-03T02:10:04.556Z</updated>
    
    <content type="html"><![CDATA[<ul><li>DOM 이란 뭘까? HTML 태그? JavaScript로 접근 하는 것? Node? 트리구조? 등등 용어만 들었을뿐 정확히 설명을 못했다.(이것뿐만 아니라 공부한 모든것들을 설명할 수가 없어 차근차근 정리해볼 계획이다.)</li></ul><h2 id="DOM-정의-MDN-참조"><a href="#DOM-정의-MDN-참조" class="headerlink" title="DOM 정의(MDN 참조)"></a>DOM 정의(MDN 참조)</h2><ul><li>문서 객체 모델(Document Object Model)은 JavaScript Node 개체의 계층화된 트리다.</li><li>DOM은 HTML, XML 문서의 프로그래밍 API이다.</li><li>문서의 구조화된 표현을 제공하며 프로그래밍 언어가 DOM 구조에 접근할 수 있는 방법을 제공한다.</li><li>문서 구조, 스타일, 내용 등을 변경할 수 있게 돕는다.</li></ul><h2 id="DOM이-뭘까"><a href="#DOM이-뭘까" class="headerlink" title="DOM이 뭘까?"></a>DOM이 뭘까?</h2><ul><li>HTML 파일이 쓴 것들이 DOM인가? No</li><li>소스보기에 보여지는 것들이 DOM인가? No</li><li>크롬 개발자 도구에서 보여주는 것들이 DOM인가? Yes</li><li>개발자도구나 HTML 파일이나 같은데…..? <strong>하지만 종종 다른 경우가 있다.</strong></li></ul><h3 id="HTML과-DOM이-다른-점이-뭘까"><a href="#HTML과-DOM이-다른-점이-뭘까" class="headerlink" title="HTML과 DOM이 다른 점이 뭘까?"></a>HTML과 DOM이 다른 점이 뭘까?</h3><ul><li>HTML 작성할때 실수(필요한 TAG를 생략 한 경우 등)를 브라우저가 고쳐준다.</li><li>예를 들면 HTML 작성시 <code>&lt;table&gt;</code> 안에 <code>&lt;tbody&gt;</code>없이 <code>&lt;tr&gt;,&lt;th&gt;</code>를 사용한 경우 개발자 도구를 보면 <code>&lt;tbody&gt;</code>가 존재한다.</li><li><code>&lt;tbody&gt;</code>는 바로 DOM에 있을것 이다.</li><li>따라서 CSS, JavaScript으로 찾을 수 있고 스타일을 변경하거나 조작이 가능하다.</li></ul><p><a href="https://raw.githubusercontent.com/shldhee/shldhee.github.io/master/images/JavaScript/dom-1.png" rel="external nofollow noopener noreferrer" target="_blank"><img title="big size image" src="https://raw.githubusercontent.com/shldhee/shldhee.github.io/master/images/JavaScript/dom-1.png"></a></p><h3 id="JavaScript-vs-DOM"><a href="#JavaScript-vs-DOM" class="headerlink" title="JavaScript vs DOM"></a>JavaScript vs DOM</h3><ul><li>JavaScript는 브라우저가 읽고 사용하는 언어입니다.</li><li>하지만 DOM은 그 일이 일어나는 곳입니다.</li><li>사실은 JavaScript의 것라고 생각하는 것들이 정확히는 <strong>DOM API</strong>이다.</li><li>예를 들면, element에 있는 mouseenter event를 확인하기 위해 JavaScript를 사용한다.</li><li>element는 사실 DOM node이다. DOM node의 DOM 속성을 통해 해당 event listener를 연결합니다.</li><li>event가 발생할때 DOM node는 event를 내보낸다(발생시킨다).<ul><li>node란 어떤 객체의 구성 요소를 의미한다.</li></ul></li></ul><p><img src="https://raw.githubusercontent.com/shldhee/shldhee.github.io/master/images/JavaScript/dom-2.jpg" alt="dom-2"></p><h3 id="결론"><a href="#결론" class="headerlink" title="결론"></a>결론</h3><ul><li>JavaScript는 문법, 언어이며 DOM API가 없는 브라우저 밖에서 완전히 사용이 가능하다.(Node.js)</li><li>DOM은 브라우저내에서 작동하고 존재한다.</li><li>DOM은 파싱 된 HTML이라고 말할 수 있습니다.</li><li>웹페이지가 로드되면 브라우저는 DOM 페이지을 만든다.</li><li>내 생각으로는 브라우저내에 DOM이 존재하고 HTML 문서를 해석한 다음 생성되는 것이 DOM이다. 한줄로 정의하고 싶은데 쉽지 않다.</li></ul><p><strong>참조</strong></p><ul><li><a href="https://css-tricks.com/dom/" rel="external nofollow noopener noreferrer" target="_blank">CSS-Trick:What is the DOM?</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;DOM 이란 뭘까? HTML 태그? JavaScript로 접근 하는 것? Node? 트리구조? 등등 용어만 들었을뿐 정확히 설명을 못했다.(이것뿐만 아니라 공부한 모든것들을 설명할 수가 없어 차근차근 정리해볼 계획이다.)&lt;/li&gt;
&lt;/
      
    
    </summary>
    
      <category term="javascript" scheme="https://shldhee.github.io/categories/javascript/"/>
    
    
      <category term="javascript" scheme="https://shldhee.github.io/tags/javascript/"/>
    
      <category term="DOM" scheme="https://shldhee.github.io/tags/DOM/"/>
    
      <category term="browser" scheme="https://shldhee.github.io/tags/browser/"/>
    
  </entry>
  
  <entry>
    <title>React - React-Router</title>
    <link href="https://shldhee.github.io/2018/04/02/react-router/"/>
    <id>https://shldhee.github.io/2018/04/02/react-router/</id>
    <published>2018-04-01T15:34:08.000Z</published>
    <updated>2020-07-23T08:31:33.046Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>리액트 라우터는 여러개의 페이지를 가진 애플리케이션을 만들 때 사용합니다.<br>리액트 라우터를 사용하면 애플리캐이션의 페이지 이동, 페이지 전체 이동, URL을 기반으로 페이지의 일부만 다시 작성하게 하는 세부적인 설정 등이 가능합니다.</p></blockquote><h2 id="react-router-설치"><a href="#react-router-설치" class="headerlink" title="react-router 설치"></a>react-router 설치</h2><p><code>npm install --save react-router-dom</code></p><h2 id="react-router-설명"><a href="#react-router-설명" class="headerlink" title="react-router 설명"></a>react-router 설명</h2><ul><li><code>exact</code> 주어진 경로와 정확히 일치 해야 설정한 컴포넌트를 보여준다.<ul><li><code>/about</code>으로 접속시 Home 컴포넌트와 About 컴포넌트가 같이 보인다.(<code>/</code>, <code>/about</code> 둘다 포함되기 때문)</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">  &lt;Route exact path=<span class="string">"/"</span> component=&#123;Home&#125;/&gt;</span><br><span class="line">  <span class="comment">//&lt;Route path="/" component=&#123;Home&#125;/&gt;</span></span><br><span class="line">  &lt;Route path=<span class="string">"/about"</span> component=&#123;About&#125;/&gt;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br></pre></td></tr></table></figure><ul><li><code>Switch</code>를 사용하면 정상적이지 않은 URL 접근을 감지할 수 있다.<ul><li>아래 코드에서 <code>/user/:id</code>,<code>/about/:id</code>에 매치되지 않은 경우 <code>UserList</code> 컴포넌트를 보여준다.</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;Switch&gt;</span><br><span class="line">  &lt;Route path=<span class="string">'/user/:id'</span> component=&#123;UserCard&#125; /&gt;</span><br><span class="line">  &lt;Route path=<span class="string">'/about/:id'</span> component=&#123;About&#125; /&gt;</span><br><span class="line">  &lt;Route component=&#123;UserList&#125; /&gt;</span><br><span class="line">&lt;<span class="regexp">/Switch&gt;</span></span><br></pre></td></tr></table></figure><ul><li><code>&lt;Route path=&#39;/user/:id&#39; component={UserCard} /&gt;</code> path에 <code>/user/:id</code>처럼 경로를 지정하면 컴포넌트(여기선 <code>UserCard</code>)의 <code>this.props.match.params.id</code>로 <code>id</code>의 값을 구할 수 있다.</li><li><code>&lt;Link to=&quot;path&quot;&gt;...&lt;/Link&gt;</code>는 <code>&lt;a href=&quot;path&quot;&gt;...&lt;/a&gt;</code>로 작성해도 문제 없지만 <code>&lt;Link&gt;</code>는 브라우저의 이력(<code>history</code>객체)과 관련된 세부적인 설정을 할 수 있다.</li></ul><p><em>Route - CustomerApp.js</em></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  BrowserRouter <span class="keyword">as</span> Router,</span><br><span class="line">  Route,</span><br><span class="line">  Link,</span><br><span class="line">  Switch</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">'react-router-dom'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> users = [</span><br><span class="line">  &#123;<span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>:<span class="string">"토티"</span>, <span class="attr">info</span>: <span class="string">"AS로마"</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">id</span>: <span class="number">2</span>, <span class="attr">name</span>:<span class="string">"델피에로"</span>, <span class="attr">info</span>: <span class="string">"유벤투스"</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">id</span>: <span class="number">3</span>, <span class="attr">name</span>:<span class="string">"다비즈"</span>, <span class="attr">info</span>: <span class="string">"유벤투스"</span>&#125;,</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> CustomerApp = <span class="function"><span class="params">()</span> =&gt;</span> (</span><br><span class="line">  &lt;Router&gt;</span><br><span class="line">    &lt;div style=&#123;&#123;<span class="attr">margin</span>: <span class="number">20</span>&#125;&#125;&gt;</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;Switch&gt;</span><br><span class="line">          &lt;Route path=<span class="string">'/user/:id'</span> component=&#123;UserCard&#125; /&gt;</span><br><span class="line">          &lt;Route component=&#123;UserList&#125; /&gt;</span><br><span class="line">        &lt;<span class="regexp">/Switch&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>div&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>Router&gt;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserList</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">const</span> ulist = users.map(<span class="function"><span class="params">e</span> =&gt;</span> (</span><br><span class="line">      &lt;li key=&#123;e.id&#125;&gt;</span><br><span class="line">        &lt;Link to = &#123;<span class="string">'/user/'</span> + e.id &#125;&gt;&#123;e.name&#125;&lt;<span class="regexp">/Link&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>li&gt;</span><br><span class="line">    ))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">       &lt;ul&gt;&#123;ulist&#125;&lt;<span class="regexp">/ul&gt;</span></span><br><span class="line"><span class="regexp">    )</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">class UserCard extends Component &#123;</span></span><br><span class="line"><span class="regexp">  render () &#123;</span></span><br><span class="line"><span class="regexp">    const &#123;params&#125; = this.props.match;</span></span><br><span class="line"><span class="regexp">    console.log(typeof params.id); /</span><span class="regexp">/ string</span></span><br><span class="line"><span class="regexp">    const id = parseInt(params.id, 10);</span></span><br><span class="line"><span class="regexp">    console.log(typeof id); /</span><span class="regexp">/ number</span></span><br><span class="line"><span class="regexp">    const user = users.filter(e =&gt; e.id === id)[0];</span></span><br><span class="line"><span class="regexp">    return (</span></span><br><span class="line"><span class="regexp">      &lt;div&gt;</span></span><br><span class="line"><span class="regexp">        &lt;div&gt;&#123;id&#125;: &#123;user.name&#125; - &#123;user.info&#125;&lt;/</span>div&gt;</span><br><span class="line">        &lt;div&gt;<span class="xml"><span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">'/'</span>&gt;</span>-&gt; 뒤로가기<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    )</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default CustomerApp;</span></span><br></pre></td></tr></table></figure><h2 id="결론"><a href="#결론" class="headerlink" title="결론"></a>결론</h2><ul><li>리액트 라우터를 사용하면 간단하게 화면 전환을 구현할 수 있다.</li><li>리액트 라우터는 고정 헤더와 푸터를 지정할 수 있다.</li><li>URL 매개변수를 지정해서 매개변수를 기반으로 컴포넌트의 내용을 변경할 수 있습니다.</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;리액트 라우터는 여러개의 페이지를 가진 애플리케이션을 만들 때 사용합니다.&lt;br&gt;리액트 라우터를 사용하면 애플리캐이션의 페이지 이동, 페이지 전체 이동, URL을 기반으로 페이지의 일부만 다시 작성하게 하는 세부적인 설정 
      
    
    </summary>
    
      <category term="react" scheme="https://shldhee.github.io/categories/react/"/>
    
    
      <category term="javascript" scheme="https://shldhee.github.io/tags/javascript/"/>
    
      <category term="react" scheme="https://shldhee.github.io/tags/react/"/>
    
      <category term="route" scheme="https://shldhee.github.io/tags/route/"/>
    
  </entry>
  
  <entry>
    <title>React - FLUX</title>
    <link href="https://shldhee.github.io/2018/03/31/react-flux/"/>
    <id>https://shldhee.github.io/2018/03/31/react-flux/</id>
    <published>2018-03-31T14:46:38.000Z</published>
    <updated>2020-07-23T08:31:33.045Z</updated>
    
    <content type="html"><![CDATA[<ul><li>FLUX의 정보 전달 흐름</li><li>Action : 어떤 기능을 실행 시작한다. 실제 처리는 하지 않는다. Dispatcher에게 넘긴다.</li><li>Dispatcher : Action으로 받은 것을 Store에게 전달 한다.</li><li>Store : 애플리케이션의 상태를 기록한다. 상태가 변경될 때마다 화면 출력에 반영한다. Store 변화시 렌더링을 위해 View가 실행 된다.</li><li>View : Store로 인해 상태가 변경될 때 화면의 출력을 변경합니다. Flux는 View에 리액트를 사용한다.</li><li>FLUX 사용 이유는 복잡한 애플리케이션을 만들 때는 무엇이 어디서 일어나는지 파악하기 힘들다. 하지만 FLUX를 사용하면 어떤 파일에서 어떤 처리가 이뤄지는지 쉽게 파악할 수 있다.</li><li>따라서 공동 개발때 큰 효과를 발휘하고, 어떤 코드가 사용되는지 쉽게 파악되고, 버그도 줄일 수 있다.</li></ul><pre class="mermaid">graph LRA[Action] --> B[Dispatcher]B --> C[Store]C --> D[View]D --> A</pre><h2 id="FLUX-예제"><a href="#FLUX-예제" class="headerlink" title="FLUX 예제"></a>FLUX 예제</h2><ul><li>이름 쓰고 등록 누르면 이름과 메세지가 나온다.</li><li>2가지 Action이 있다. 이름을 수정할때 실행되는 <code>CHANGE_NAME</code>, 등록 버튼 누를때 <code>SUBMIT_NAME</code></li><li>Action이 발생하면 Dispatcher는 액션 실행 사실을 Store에 전달한다.</li><li>Store는 이름과, 메세지를 변경하면 View에 전달된다. 그럼 화면에 적용 짜잔!!!</li></ul><p><em>파일 구조</em></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">actions.js</span><br><span class="line">appDispatcher.js</span><br><span class="line">index.js</span><br><span class="line">stores.js</span><br></pre></td></tr></table></figure><ul><li>Store, Action부터 생각하자.</li><li>이름 입력하는 예제이므로 이름과, 이름이 변경할 때 발생할 액션이 필요하다.</li><li>이름 데이터 : <code>nameStore</code>, 이름 변경 액션 <code>CHANGE_NAME</code></li><li>등록 버튼을 눌러 인사 메시지를 출력한다.</li><li>메시지 저장 데이터 : <code>messageStore</code>, 등록 버튼 액션 <code>SUBMIT_NAME</code></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 사용할 Store</span></span><br><span class="line"><span class="keyword">const</span> nameStore = &#123; <span class="attr">name</span>: <span class="string">''</span>, <span class="attr">onChange</span>: <span class="literal">null</span> &#125;</span><br><span class="line"><span class="keyword">const</span> messageStore = &#123; <span class="attr">message</span>: <span class="string">''</span>, <span class="attr">onChange</span>: <span class="literal">null</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 사용할 Action</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ActionType = &#123;</span><br><span class="line">CHANGE_NAME = <span class="string">'CHANGE_NAME'</span>,</span><br><span class="line">SUBMIT_NAME = <span class="string">'SUBMIT_NAME'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>아래 그림들은 현재까지 설명한 부분들이다.</li></ul><pre class="mermaid">graph LRA[Action:<br>CHANGE_NAME] --> B[Dispatcher]B --> C[Store<br>nameStore]C --> D[View<br>AppView<br>Change name]D --> A</pre><pre class="mermaid">graph LRA[Action:<br>SUBMIT_NAME] --> B[Dispatcher]B --> C[Store<br>messageStore]C --> D[View<br>AppView<br>Submit button]D --> A</pre><ul><li>Dispatcher 정의</li><li><code>npm install --save flux</code></li><li>페이스북에서 제공하는 <code>Dispathcer</code> 클래스의 인스턴스를 생성하는 것이 끝</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Dispatcher &#125; <span class="keyword">from</span> <span class="string">'flux'</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> appDispatcher = <span class="keyword">new</span> Dispatcher();</span><br></pre></td></tr></table></figure><ul><li>Store 정의</li><li>사용할 <code>Store</code>를 생성한다.</li><li><code>Action</code>과 <code>Store</code>를 연결할 수 있게 <code>Dispathcer</code>에 콜백 함수를 등록한다.</li><li><code>register</code> 메서드는 Dispathcer에서 <code>dispatch</code>메서드를 실행할때 <code>register</code>에 등록한 콜백함수들이 실행된다.</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; appDispatcher &#125; <span class="keyword">from</span> <span class="string">'./appDispatcher'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; ActionType &#125; <span class="keyword">from</span> <span class="string">'./actions'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 사용할 Store</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> nameStore = &#123; <span class="attr">name</span>: <span class="string">''</span>, <span class="attr">onChange</span>: <span class="literal">null</span> &#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> messageStore = &#123; <span class="attr">message</span>: <span class="string">''</span>, <span class="attr">onChange</span>: <span class="literal">null</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Action과 Store 연결, Dispathcer에 콜백 함수 등록</span></span><br><span class="line">appDispatcher.register(<span class="function"><span class="params">payload</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (payload.actionType === ActionType.CHANGE_NAME) &#123;</span><br><span class="line">    nameStore.name = payload.value;</span><br><span class="line">    nameStore.onChange();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">appDispatcher.register(<span class="function"><span class="params">payload</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span>(payload.actionType === ActionType.SUBMIT_NAME) &#123;</span><br><span class="line">    messageStore.message = nameStore.name + <span class="string">'님 안녕하세요.'</span>;</span><br><span class="line">    messageStore.onChange();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>Action 정의</li><li><code>ActionType</code> 정의하기</li><li>정의한 <code>ActionType</code>을 <code>Dispatcher</code>에 전달하기 위한 메서드 정의하기</li><li>Store 정의 부분에서 언급한 <code>disptach</code>메서드가 샐행되어 <code>register</code>에 등록된 콜백 함수를 모두 실행한다.</li><li>이때 <code>dispatch</code>에 지정한 매개변수가 전달된다.(<code>{ actionType, value }</code>)</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;appDispatcher&#125; <span class="keyword">from</span> <span class="string">'./appDispatcher'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> ActionType = &#123;</span><br><span class="line">  CHANGE_NAME : <span class="string">'CHANGE_NAME'</span>,</span><br><span class="line">  SUBMIT_NAME : <span class="string">'SUBMIT_NAME'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Actions을 생성하고 ... Dispatcher에 정보를 전달합니다.</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> Actions = &#123;</span><br><span class="line">  changeName: <span class="function"><span class="params">name</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (name === <span class="literal">null</span>) <span class="keyword">return</span></span><br><span class="line">    appDispatcher.dispatch(&#123;</span><br><span class="line">      actionType: ActionType.CHANGE_NAME,</span><br><span class="line">      value: name</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">  submitName: <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    appDispatcher.dispatch(&#123;</span><br><span class="line">      actionType: ActionType.SUBMIT_NAME</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>View 정의</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">'react-dom'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Actions &#125; <span class="keyword">from</span> <span class="string">'./actions'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; nameStore, messageStore &#125; <span class="keyword">from</span> <span class="string">'./stores'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AppView</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span> (props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props);</span><br><span class="line">    <span class="keyword">this</span>.state = &#123; <span class="attr">name</span>: <span class="string">''</span>, <span class="attr">message</span>: <span class="string">''</span> &#125;</span><br><span class="line">    nameStore.onChange = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">this</span>.setState(&#123;<span class="attr">name</span>: nameStore.name&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    messageStore.onChange = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">this</span>.setState(&#123;<span class="attr">message</span>: messageStore.message&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render () &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'View.render'</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">          &lt;input</span><br><span class="line">            value=&#123;<span class="keyword">this</span>.state.name&#125;</span><br><span class="line">            onChange=&#123;e =&gt; Actions.changeName(e.target.value)&#125; /&gt;</span><br><span class="line">          &lt;button onClick=&#123;() =&gt; Actions.submitName()&#125;&gt;등록&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>div&gt;</span><br><span class="line">        &lt;div&gt;&#123;<span class="keyword">this</span>.state.message&#125;&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>div&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">AppView</span> /&gt;</span>, document.getElementById('root'));</span></span><br></pre></td></tr></table></figure><h3 id="CHANGE-NAME-액션-타입-실행-순서"><a href="#CHANGE-NAME-액션-타입-실행-순서" class="headerlink" title="CHANGE_NAME 액션 타입 실행 순서"></a>CHANGE_NAME 액션 타입 실행 순서</h3><ol><li><p>이름 변경할때 action 발생</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;input</span><br><span class="line">  value=&#123;<span class="keyword">this</span>.state.name&#125;</span><br><span class="line">  onChange=&#123;e =&gt; Actions.changeName(e.target.value)&#125; /&gt;</span><br></pre></td></tr></table></figure></li><li><p>actions.js 에서 ActionType을 Disptacher(<code>dispatch</code>메서드 실행)에 전달</p></li><li><p><code>dispatch</code>메서드를 실행하면 store.js에 <code>register</code>메서드가 모두 실행된다.</p></li><li><p><code>dispatch</code>의 인자값을 <code>payload</code>로 받아 <code>payload.actionType</code>에 맞는 부분을 실행하여 상태를 변경한다.</p></li><li><p><code>nameStore.onChange()</code>를 통해 <code>setState</code>가 실행되어 View가 렌더링된다.</p></li></ol><h2 id="결론"><a href="#결론" class="headerlink" title="결론"></a>결론</h2><ul><li>FLUX를 이용하면 프로그램을 간략하게 유지할 수 있다.</li><li>FLUX에서는 Action -&gt; Dispatcher -&gt; Store -&gt; View처럼 정보가 한 방향으로 흐릅니다.</li><li>FLUX를 이용해 프로그램을 만들 때는 각 처리가 각각의 역할을 넘지 않게 구현해주세요.</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;FLUX의 정보 전달 흐름&lt;/li&gt;
&lt;li&gt;Action : 어떤 기능을 실행 시작한다. 실제 처리는 하지 않는다. Dispatcher에게 넘긴다.&lt;/li&gt;
&lt;li&gt;Dispatcher : Action으로 받은 것을 Store에게 전달 한
      
    
    </summary>
    
      <category term="react" scheme="https://shldhee.github.io/categories/react/"/>
    
    
      <category term="javascript" scheme="https://shldhee.github.io/tags/javascript/"/>
    
      <category term="react" scheme="https://shldhee.github.io/tags/react/"/>
    
      <category term="flux" scheme="https://shldhee.github.io/tags/flux/"/>
    
  </entry>
  
  <entry>
    <title>Network - HTTP의 이해</title>
    <link href="https://shldhee.github.io/2018/03/30/http-1/"/>
    <id>https://shldhee.github.io/2018/03/30/http-1/</id>
    <published>2018-03-29T15:16:54.000Z</published>
    <updated>2020-07-23T08:31:33.045Z</updated>
    
    <content type="html"><![CDATA[<ul><li>인터넷(Internet) : TCP/IP 기반의 네트워크가 전세계적으로 확대되어 하나로 연결된 네트워크들의 네트워크 (네트워크의 결합체)</li></ul><h2 id="HTTP-Hypertext-Transfer-Protocol-란"><a href="#HTTP-Hypertext-Transfer-Protocol-란" class="headerlink" title="HTTP(Hypertext Transfer Protocol)란?"></a>HTTP(Hypertext Transfer Protocol)란?</h2><ul><li>HTTP는 서버와 클라이언트가 인터넷상에서 데이터를 주고 받기 위한 프로토콜(protocol)입니다.</li><li>HTTP는 계속 발전하여 HTTP/2까지 등장</li></ul><h2 id="HTTP-작동방식"><a href="#HTTP-작동방식" class="headerlink" title="HTTP 작동방식"></a>HTTP 작동방식</h2><ul><li>HTTP는 서버/클라이언트 모델을 따릅니다. 클라이언트가 요청하면 서버가 응답한다.</li><li>장점<ul><li>불특정 다수를 대상으로 하는 서비스에 적합</li><li>클라이언트와 서버가 계속 연결된 형태가 아니므로 클라이언트와 서버간의 최대 연결수보다 훨씬 많은 요청와 응답을 처리할 수 있다.</li></ul></li><li>단점<ul><li>연결을 끊어버리기 때문에, 클라이언트의 이전 상황을 알 수 없다.</li><li>이러한 특징을 무상태(Stateless)라고 한다.</li><li>이러한 특징 때문에 정보를 유지하기 위해서 Cookie와 같은 기술이 등장했다.</li></ul></li></ul><h2 id="URL"><a href="#URL" class="headerlink" title="URL"></a>URL</h2><ul><li><p>URL(Uniform Resource Locator)</p><ul><li>인터넷 상의 자원의 위치</li><li>특정 웹 서버의 특정파일에 접근하기 위한 경로 혹은 주소<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">http://www.suny.co.kr/docs/index.html</span><br><span class="line">접근프로토콜://IP 주소 또는 도메인 이름/문서의 경로/문서 이름</span><br></pre></td></tr></table></figure></li></ul></li><li><p>하나의 물리적컴퓨터에는 여러개 소프트웨어 서버 작동 가능(각각 포트가 달라야 한다.)</p><h6 id="ip는-집-주소-하나의-컴퓨터는-하나의-ip-포트는-각각의-하나의-방-각-서버는-하나의-방을-차지"><a href="#ip는-집-주소-하나의-컴퓨터는-하나의-ip-포트는-각각의-하나의-방-각-서버는-하나의-방을-차지" class="headerlink" title="ip는 집 주소 하나의 컴퓨터는 하나의 ip, 포트는 각각의 하나의 방 각 서버는 하나의 방을 차지"></a>ip는 집 주소 하나의 컴퓨터는 하나의 ip, 포트는 각각의 하나의 방 각 서버는 하나의 방을 차지</h6></li></ul><h2 id="HTTP-동작-순서"><a href="#HTTP-동작-순서" class="headerlink" title="HTTP 동작 순서"></a>HTTP 동작 순서</h2><ol><li>클라이언트와 웹서버 연결(connect)</li><li>클라이언트 요청(request)<pre><code>* HTTP 요청 메시지(요청 헤더, 요청 바디)* GET 방식은 요청 바디가 없다. 관련 자료들이 URI와 같이 넘겨진다.</code></pre></li><li>서버 응답(response)<pre><code>* HTTP 응답 메시지(응답 헤더, 응답 바디)</code></pre></li><li>연결 끊김(close)</li></ol><p><img src="https://lh3.googleusercontent.com/P0nLbMawFwlLE2qXdIBbSnxWYEaE9M3ARDmKVB1puAEFIIOVyzIWtafQVcbo8VHFfcn5Fnn8r0-Y" alt="enter image description here"></p><p>참조 : <a href="http://www.edwith.org/boost-course/intro" rel="external nofollow noopener noreferrer" target="_blank">부스트코스</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;인터넷(Internet) : TCP/IP 기반의 네트워크가 전세계적으로 확대되어 하나로 연결된 네트워크들의 네트워크 (네트워크의 결합체)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;HTTP-Hypertext-Transfer-Protocol-란&quot;
      
    
    </summary>
    
      <category term="http" scheme="https://shldhee.github.io/categories/http/"/>
    
    
      <category term="http" scheme="https://shldhee.github.io/tags/http/"/>
    
      <category term="requrest" scheme="https://shldhee.github.io/tags/requrest/"/>
    
      <category term="response" scheme="https://shldhee.github.io/tags/response/"/>
    
  </entry>
  
  <entry>
    <title>Git - branch</title>
    <link href="https://shldhee.github.io/2018/02/20/git-branch/"/>
    <id>https://shldhee.github.io/2018/02/20/git-branch/</id>
    <published>2018-02-20T04:07:07.000Z</published>
    <updated>2020-07-23T08:31:33.044Z</updated>
    
    <content type="html"><![CDATA[<h1 id="branch"><a href="#branch" class="headerlink" title="branch"></a>branch</h1><h2 id="branch-명령어"><a href="#branch-명령어" class="headerlink" title="branch 명령어"></a>branch 명령어</h2><ul><li><code>git branch --decorate</code>하면 현재 어떤 브랜치를 사용중인지 확인 가능</li><li><code>git checkout branch명</code>하면 워킹디렉토리 파일 내용도 변경</li><li><code>git log --oneline --decorate --graph --all</code><ul><li>oneline : 한줄로 보여주기</li><li>decorate : 현재 사용중인 브랜치 보여주기</li><li>graph : 그래프 보여주기</li><li>all : 모든 브랜치 log 보여주기</li></ul></li></ul><h3 id="branch-merge"><a href="#branch-merge" class="headerlink" title="branch merge"></a>branch merge</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">git checkout master</span><br><span class="line">git merge hotfix</span><br><span class="line"></span><br><span class="line">Fast-forward</span><br><span class="line">master 에서 hotfix 브랜치를 만들었다</span><br><span class="line">master - c2</span><br><span class="line">hotfix - c2였다가 커밋후 c3로 변경</span><br><span class="line">따라서 c2-&gt;c3순서이므로 별도의 Merge과정 없이 최신커밋으로 이동</span><br><span class="line">이것이 바로 Fast-forward</span><br></pre></td></tr></table></figure><ul><li>hotfix 브랜치를 master 브랜치랑 merge</li><li><code>git branch -d hotfix</code> merge 후 필요 없으니 브랜치 삭제</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">C2&lt;-C4(matser)</span><br><span class="line">C2&lt;-C3&lt;-C5(issue53)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">git checkout master</span><br><span class="line">git merge issue53</span><br><span class="line"></span><br><span class="line">Fast-forward 메시지가 안뜬다.</span><br><span class="line">이 경우는 3-way Merge를 한다.</span><br><span class="line">C2(공통조상), C4(master), C5(issue53)</span><br><span class="line">3개라서 3wayMerge인가..</span><br></pre></td></tr></table></figure><ul><li>Fast-forward 처럼 최신 커밋으로 이동하는게 아니라 합친 결과를 새로운 커밋으로 만들고 브랜치가 그 커밋으로 이동한다.</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">C4&lt;-C6(master)</span><br><span class="line">C5&lt;-C6(issue53)</span><br></pre></td></tr></table></figure><ul><li>마무리는 <code>git branch -d issue53</code></li></ul><h3 id="branch-merge-conflict"><a href="#branch-merge-conflict" class="headerlink" title="branch merge conflict"></a>branch merge conflict</h3><ul><li>master 브랜치, issue53 브랜치에서 같은 파일을 수정한 경우 충돌</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD</span><br><span class="line">yahoyahoyahoyahoyahoyahoyah:</span><br><span class="line">=======</span><br><span class="line">112312312112312312112312312</span><br><span class="line">&gt;&gt;&gt;&gt;&gt;&gt;&gt; issue53</span><br></pre></td></tr></table></figure><ul><li>======= 위쪽은 HEAD 버전(master)</li><li>아래쪽은 issue53</li><li>해결방법은 새로 작성, 위쪽(HEAD), 아래쪽(issue53) 중 선택해야 한다.</li><li>수정 후 &lt;&lt;&lt; ==== &gt;&gt;&gt; 이런 부분들은 삭제</li><li>해결 후 <code>git add</code></li><li>Merge 한 것을 커밋 <code>git commit</code> 하면 아래 메시지 나온다.</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Merge branch &apos;issue53&apos;</span><br><span class="line"></span><br><span class="line">Confilcts:</span><br><span class="line">  test.rb</span><br><span class="line"></span><br><span class="line">//...</span><br></pre></td></tr></table></figure><ul><li>commit message 를 상세히 기록한다.</li></ul><h3 id="manage-branch"><a href="#manage-branch" class="headerlink" title="manage branch"></a>manage branch</h3><ul><li><code>git branch</code> : 브랜치의 목록 보여줌</li><li><code>git branch -v</code> : 마지맛 커밋 메시지도 함께 보여줌</li><li><code>git branch --merged</code> : 머지 된 브랜치 보여줌</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git branch --merged</span><br><span class="line">  issue53</span><br><span class="line">* master</span><br></pre></td></tr></table></figure><ul><li><code>*</code>기호가 붙어 있지 않은 브랜치는 <code>git branch -d</code>로 삭제해도 되는 브랜치다. 그 이유는 이미 다른 브랜치와 Merge 했기 때문</li><li><code>git branch --no-merged</code> : 머지 되지 않은 브랜치 보여줌</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git branch --merged</span><br><span class="line">  testing</span><br></pre></td></tr></table></figure><ul><li><code>testing</code>브랜치는 아직 Merge 하지 않은 커밋을 담고 있기 때문에 <code>git branch -d</code>로 삭제되지 않는다.</li></ul><h3 id="Colaborator"><a href="#Colaborator" class="headerlink" title="Colaborator"></a>Colaborator</h3><ul><li>Collaborator 가 아니면 fork 떠서 자기스페이스로 복사한 후 push -&gt; 원래 저장소로 보내기 이것이 바로 Pull request 라고 한다.</li><li>Collaborator 면 해당 repo 에서 바로 push 가능</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;branch&quot;&gt;&lt;a href=&quot;#branch&quot; class=&quot;headerlink&quot; title=&quot;branch&quot;&gt;&lt;/a&gt;branch&lt;/h1&gt;&lt;h2 id=&quot;branch-명령어&quot;&gt;&lt;a href=&quot;#branch-명령어&quot; class=&quot;headerli
      
    
    </summary>
    
      <category term="git" scheme="https://shldhee.github.io/categories/git/"/>
    
    
      <category term="git" scheme="https://shldhee.github.io/tags/git/"/>
    
      <category term="branch" scheme="https://shldhee.github.io/tags/branch/"/>
    
  </entry>
  
  <entry>
    <title>React - event binding</title>
    <link href="https://shldhee.github.io/2018/01/25/react-event/"/>
    <id>https://shldhee.github.io/2018/01/25/react-event/</id>
    <published>2018-01-24T15:49:05.000Z</published>
    <updated>2020-07-23T08:31:33.045Z</updated>
    
    <content type="html"><![CDATA[<h2 id="React-이벤트"><a href="#React-이벤트" class="headerlink" title="React 이벤트"></a>React 이벤트</h2><ul><li>상태를 관리하면 컴포넌트 자체가 상태를 관리하는 값으로 기억해야 하므로 컴포넌트의 <code>state</code> 객체를 이용</li><li>상태 값 변경시에는 <code>setState()</code>를 이용(메서드 이용하여 값 변경시 <code>render()</code>메서드를 함께 호출해 컴포넌트를 재구성)</li><li>이벤트 등록 <code>&lt;div onClick={clickHandler}&gt;click Me&lt;/div&gt;</code></li><li>클릭 이벤트로 클래스의 메서드 호출 <code>this.clickHandler = this.clickHandler.bind(this)</code><ul><li><a href="https://goo.gl/Hrpfpk" rel="external nofollow noopener noreferrer" target="_blank">React 에서의 바인딩(binding) 방법들</a></li><li><a href="https://goo.gl/Bd2VDB" rel="external nofollow noopener noreferrer" target="_blank">[ES6, react] 리액트에서 화살표 함수(arrow function)는 선택이 아닌 필수</a></li></ul></li><li>화살표 함수 사용시 함수 객체를 정의하면 함수 내부의 <code>this</code>가 변경되지 않는다.<ul><li><code>this.state.checked</code>라고 작성하면 클래스의 <code>staet.checked</code>를 나타낸다.</li></ul></li></ul><h2 id="React-로-이벤트를-만드는-방법"><a href="#React-로-이벤트를-만드는-방법" class="headerlink" title="React 로 이벤트를 만드는 방법"></a>React 로 이벤트를 만드는 방법</h2><h3 id="1-render-메서드-내부에서-이벤트-핸들러-정의하기"><a href="#1-render-메서드-내부에서-이벤트-핸들러-정의하기" class="headerlink" title="1. render() 메서드 내부에서 이벤트 핸들러 정의하기"></a>1. render() 메서드 내부에서 이벤트 핸들러 정의하기</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Name</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">const</span> handler = <span class="function"><span class="params">e</span> =&gt;</span> alert(<span class="string">'Hello'</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;handler&#125;</span>&gt;</span>Click<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>가장 쉬운 방법</li><li><code>render()</code> 함수내에 같이 있으므로 <code>this</code>를 사용할 필요가 없다.</li></ul><h3 id="2-클래스의-메서드로-정의하고-this-바인드하기"><a href="#2-클래스의-메서드로-정의하고-this-바인드하기" class="headerlink" title="2. 클래스의 메서드로 정의하고, this 바인드하기"></a>2. 클래스의 메서드로 정의하고, this 바인드하기</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Name</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="keyword">this</span>.classhandler = <span class="keyword">this</span>.classhandler.bind(<span class="keyword">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  classhandler(e) &#123;</span><br><span class="line">    alert(<span class="string">'Hello'</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.classhandler&#125;</span>&gt;</span>Click<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>이벤트 핸들러가 여러줄이라면 1 번의 경우 <code>render()</code> 내부가 너무 복잡해진다.(렌더링시 느려질수도…..?)</li><li><code>bind()</code>메서드 사용</li></ul><h3 id="3-클래스-메서드로-정의하고-화살표-함수로-호출하기"><a href="#3-클래스-메서드로-정의하고-화살표-함수로-호출하기" class="headerlink" title="3. 클래스 메서드로 정의하고, 화살표 함수로 호출하기"></a>3. 클래스 메서드로 정의하고, 화살표 함수로 호출하기</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Name</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  classHandler() &#123;</span><br><span class="line">    alert(<span class="string">'Hello'</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;e</span> =&gt;</span> this.classHandler(e)&#125;&gt;Click<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>2 번보다 <code>bind()</code> 메서드를 사용하지 않아 편리하다.</li><li>책에서 이걸 추천한다.</li></ul><h4 id="creat-react-app"><a href="#creat-react-app" class="headerlink" title="creat-react-app"></a>creat-react-app</h4><ul><li><code>npm install -g create-react-app</code></li><li><code>create-react-app hello</code></li><li><code>cd hello</code> -&gt; <code>npm start</code></li><li><code>npm run build</code> : build 폴더 생성, 다양한 압축 파일 생성<ul><li>이 생성파일들을 웹 브라우저에서 바로 실행이 안되게 보안이 되어있다.</li><li>로컬 환경에서 빌드 확인 하려면 웹 서버가 필요</li></ul></li><li><code>npm install -g serve</code> : 서버 실행시 필요한거 설치</li><li><code>serve -s build</code> : build 폴더에 있는것들 실행</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;React-이벤트&quot;&gt;&lt;a href=&quot;#React-이벤트&quot; class=&quot;headerlink&quot; title=&quot;React 이벤트&quot;&gt;&lt;/a&gt;React 이벤트&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;상태를 관리하면 컴포넌트 자체가 상태를 관리하는 값으로 기억해야 
      
    
    </summary>
    
      <category term="react" scheme="https://shldhee.github.io/categories/react/"/>
    
    
      <category term="react" scheme="https://shldhee.github.io/tags/react/"/>
    
      <category term="create-react-app" scheme="https://shldhee.github.io/tags/create-react-app/"/>
    
      <category term="state" scheme="https://shldhee.github.io/tags/state/"/>
    
      <category term="event handler" scheme="https://shldhee.github.io/tags/event-handler/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript - Runtime</title>
    <link href="https://shldhee.github.io/2017/12/21/javascript-runtime/"/>
    <id>https://shldhee.github.io/2017/12/21/javascript-runtime/</id>
    <published>2017-12-21T02:13:22.000Z</published>
    <updated>2020-07-23T08:31:33.045Z</updated>
    
    <content type="html"><![CDATA[<h2 id="자바스크립트는-어떻게-작동하는가-엔진-런타임-콜스택"><a href="#자바스크립트는-어떻게-작동하는가-엔진-런타임-콜스택" class="headerlink" title="자바스크립트는 어떻게 작동하는가: 엔진, 런타임, 콜스택"></a>자바스크립트는 어떻게 작동하는가: 엔진, 런타임, 콜스택</h2><ul><li>자바스크립트가 단일 쓰레드(Single-threaded)이고 콜백 큐(callback queue) 이용</li><li>자바스크립트 엔진은 구글의 V8엔진입니다. V8엔진은 크롬과 노드js에서 사용됩니다.</li></ul><h4 id="V8엔진은-두-부분으로-구성됩니다"><a href="#V8엔진은-두-부분으로-구성됩니다" class="headerlink" title="V8엔진은 두 부분으로 구성됩니다."></a>V8엔진은 두 부분으로 구성됩니다.</h4><ul><li>메모리힙(Memory Heap): 메모리할당이 이루어지는 곳</li><li>콜스택(Call Stack): 코드가 실행되면서 스택 프레임이 쌓이는 곳입니다.</li></ul><h4 id="런타임"><a href="#런타임" class="headerlink" title="런타임"></a>런타임</h4><ul><li>자바스크립트의 엔진이 중요하기 하지만 엔진만으로 모든 것이 이루지는 것은 아닙니다. 브라우저가 제공하는 웹 API라는 것도 있어서 DOM, AJAX, <code>setTimeout</code> 등이 여기에 포함됩니다. 또한 <strong>이벤트루프</strong>와 <strong>콜백큐</strong>도 있습니다.</li></ul><h4 id="콜스택"><a href="#콜스택" class="headerlink" title="콜스택"></a>콜스택</h4><ul><li>자바스크립트는 싱글 쓰레드(single-threaded) 프로그래밍 언어입니다. 다시 말하면 콜스택이 하나라는 뜻입니다. 따라서 한번에 하나의 일만 할 수 있습니다.</li><li>콜스택은 우리가 프로그램의 어디에 있는지를 기록하는 자료구조입니다.</li><li>함수 안으로 들어가게 되면 그 함수는 스택의 제일 위에 놓이게 됩니다. 실행이 완료되면 제거됩니다.</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">multiply</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x * y ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">printSquare</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> s = multiply(x, x);</span><br><span class="line">  <span class="built_in">console</span>.log(s);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">printSquare(<span class="number">5</span>);</span><br></pre></td></tr></table></figure><table><thead><tr><th>Step1</th><th>Step2</th><th>Step3</th><th>Step4</th><th>Step5</th></tr></thead><tbody><tr><td>-</td><td>multiply(x, y)</td><td>console.log(s);</td><td></td><td></td></tr><tr><td>printSquare(5)</td><td>printSquare(5)</td><td>printSquare(5)</td><td>printSquare(5)</td><td></td></tr></tbody></table><ul><li>콜스택의 각각은 <strong>스택프레임(Stack Frame)</strong>이라고 부릅니다.</li><li>예외가 발생했을때 스택트레이스가 만들어지는 방식입니다. 스택 트레이스란 기본적으로 예외가 발생했을때 콜스택의 상태입니다.</li></ul><p><em>스택트레이스 생성</em></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'SessionStack will help you resolve crashes :)'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    foo();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">start</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    bar();</span><br><span class="line">&#125;</span><br><span class="line">start();</span><br></pre></td></tr></table></figure><ul><li><strong>스택 날림(Blowing the stack)</strong> : 콜 스택의 최대 크기에 다다랐을때 나타나는 현상(재귀 함수에서 많이 나타남)</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  foo();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">foo();</span><br></pre></td></tr></table></figure><table><thead><tr><th>Step1</th><th>Step2</th><th>Step3</th><th>Step4</th><th>Overflowing</th></tr></thead><tbody><tr><td>-</td><td>-</td><td>-</td><td></td><td>foo()</td></tr><tr><td>-</td><td>-</td><td>-</td><td></td><td>foo()</td></tr><tr><td>-</td><td>-</td><td>-</td><td></td><td>foo()</td></tr><tr><td>-</td><td>-</td><td>-</td><td>foo()</td><td>foo()</td></tr><tr><td>-</td><td>-</td><td>foo()</td><td>foo()</td><td>foo()</td></tr><tr><td>-</td><td>foo()</td><td>foo()</td><td>foo()</td><td>foo()</td></tr><tr><td>foo()</td><td>foo()</td><td>foo()</td><td>foo()</td><td>foo()</td></tr></tbody></table><p><code>Maximum call stack size exceeded</code> 에러 발생</p><h4 id="동시성과-이벤트-루프"><a href="#동시성과-이벤트-루프" class="headerlink" title="동시성과 이벤트 루프"></a>동시성과 이벤트 루프</h4><p>만약 콜스택 내에 수행시간이 긴 함수가 있으면 어떻게 될까?</p><ul><li>긴 함수가 동작할때는 끝날때까지 아무것도 할 수 없다.</li><li>브라우저 콜스택 내의 많은 작업을 수행하면서 긴 시간동안 응당이 없을 수도 있다.(이떄, 브라우저 에러창 뜨면서 응답없음 표시)</li><li>UI를 막지 않고 브라우저가 응답없음 상태에 바지게 하지 않으면서 무거운 코드를 실행하려면 바로 <strong>비동기 콜백(asynchronous callbacks)</strong>을 사용해야 한다.</li></ul><h4 id="setTimeout"><a href="#setTimeout" class="headerlink" title="setTimeout"></a>setTimeout</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">"Before"</span>); <span class="comment">// A</span></span><br><span class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"0초뒤"</span>); <span class="comment">// B</span></span><br><span class="line">&#125;,<span class="number">0</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"After"</span>); <span class="comment">// C</span></span><br></pre></td></tr></table></figure><ul><li>실행결과는 A-&gt;C-&gt;B 순이다.</li><li><code>setTimeout</code>은 호출스택이 아닌 이벤트 큐에 추가한다.</li><li>따라서 호출스택에 A가 쌓이고 없어지고 C가 쌓이고 없어진 다음 이벤트 큐에 있는 B가 실행된다.</li></ul><h4 id="참조"><a href="#참조" class="headerlink" title="참조"></a>참조</h4><hr><ul><li><a href="https://engineering.huiseoul.com/%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8%EB%8A%94-%EC%96%B4%EB%96%BB%EA%B2%8C-%EC%9E%91%EB%8F%99%ED%95%98%EB%8A%94%EA%B0%80-%EC%97%94%EC%A7%84-%EB%9F%B0%ED%83%80%EC%9E%84-%EC%BD%9C%EC%8A%A4%ED%83%9D-%EA%B0%9C%EA%B4%80-ea47917c8442" rel="external nofollow noopener noreferrer" target="_blank">Huiseoul Enginnering</a></li><li><a href="http://meetup.toast.com/posts/89" rel="external nofollow noopener noreferrer" target="_blank">TOAST</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;자바스크립트는-어떻게-작동하는가-엔진-런타임-콜스택&quot;&gt;&lt;a href=&quot;#자바스크립트는-어떻게-작동하는가-엔진-런타임-콜스택&quot; class=&quot;headerlink&quot; title=&quot;자바스크립트는 어떻게 작동하는가: 엔진, 런타임, 콜스택&quot;&gt;&lt;/a
      
    
    </summary>
    
      <category term="javascript" scheme="https://shldhee.github.io/categories/javascript/"/>
    
    
      <category term="javascript" scheme="https://shldhee.github.io/tags/javascript/"/>
    
      <category term="eventloop" scheme="https://shldhee.github.io/tags/eventloop/"/>
    
      <category term="setTimeout" scheme="https://shldhee.github.io/tags/setTimeout/"/>
    
      <category term="v8" scheme="https://shldhee.github.io/tags/v8/"/>
    
  </entry>
  
  <entry>
    <title>React - react-redux-1(reducer, connect, mapStateToProps)</title>
    <link href="https://shldhee.github.io/2017/12/21/react-redux-1/"/>
    <id>https://shldhee.github.io/2017/12/21/react-redux-1/</id>
    <published>2017-12-20T16:08:37.000Z</published>
    <updated>2020-07-23T08:31:33.046Z</updated>
    
    <content type="html"><![CDATA[<h1 id="REACT"><a href="#REACT" class="headerlink" title="REACT"></a>REACT</h1><h2 id="리듀서"><a href="#리듀서" class="headerlink" title="리듀서"></a>리듀서</h2><h4 id="1-리듀서-생성"><a href="#1-리듀서-생성" class="headerlink" title="1. 리듀서 생성"></a>1. 리듀서 생성</h4><h4 id="2-어플리케이션과-연결"><a href="#2-어플리케이션과-연결" class="headerlink" title="2. 어플리케이션과 연결"></a>2. 어플리케이션과 연결</h4><p><em>reducer_books.js</em></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  books: [&#123;<span class="attr">title</span>:<span class="string">"harryPotter"</span>&#125;,&#123;<span class="attr">title</span>:<span class="string">'Javascript'</span>&#125;], <span class="comment">// Books Reducer</span></span><br><span class="line">  activeBook: &#123;<span class="attr">title</span>:<span class="string">'Javascript: The Good parts'</span>&#125; <span class="comment">// activeBook Reducer</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>books</code> : key 스테이트의 이름</li><li><code>[{title:&quot;harryPotter&quot;},{title:&#39;Javascript&#39;}]</code> : value 리듀서 그 자체</li></ul><p><em>index.js</em></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> rootReducer = combineReducers(&#123;</span><br><span class="line">  books: booksReducer</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>state 매핑</li><li><code>books</code> : <code>books</code></li><li><code>booksReducer</code> : <code>[{title:&quot;harryPotter&quot;},{title:&#39;Javascript&#39;}]</code></li></ul><p><em>BooksReducer 불러오기</em><br><code>import BooksReducer from &#39;./reducer_books</code></p><h2 id="리액트-리덕스"><a href="#리액트-리덕스" class="headerlink" title="리액트-리덕스"></a>리액트-리덕스</h2><h4 id="1-리액트와-리덕스를-연결하는-라이브러리-react-redux"><a href="#1-리액트와-리덕스를-연결하는-라이브러리-react-redux" class="headerlink" title="1. 리액트와 리덕스를 연결하는 라이브러리 react-redux"></a>1. 리액트와 리덕스를 연결하는 라이브러리 react-redux</h4><ul><li>리액트 컴포넌트에서 스테이트를 주입할 때 이 브릿지를 이용할 수 있다.</li><li>이 데이터를 컴포넌트로 주입시키는 것을 <strong>컨테이너라고</strong> 한다.</li><li>컨테이너는 리덕스에 의해 만들어지는 스테이트를 직접 접근하는 컴포넌트라는 것을 기억하세요.</li><li>가장 상위에 있는 컴포넌트가 리덕스 스테이트를 접근하는 컨테이너로 지정한다.<br><code>App&gt;BookList+DetailBook</code> 일 때 App은 DOM 컴포넌트이므로 BookList, DetailBook 컴포넌트가 컨테이너 역할을 한다.</li></ul><h4 id="2-redux-state-적용-컨테이너"><a href="#2-redux-state-적용-컨테이너" class="headerlink" title="2. redux state 적용 컨테이너"></a>2. redux state 적용 컨테이너</h4><p><em>mapStateToProps sample</em></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; connect &#125; <span class="keyword">from</span> react-redux;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">this</span>.props.asdf); <span class="comment">// -&gt; 1234</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mapStateToProps</span>(<span class="params">state</span>) </span>&#123; <span class="comment">// state는 BookList, activeBook 배열을 가지고 있다.</span></span><br><span class="line">  <span class="comment">// 반환되는 것들은 Booklist에서 Props를 사용된다. this.props</span></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    asdf: <span class="string">'1234'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>using mapStateToProps, reducer_books.js 참조</em></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; connect &#125; <span class="keyword">from</span> react-redux;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">this</span>.props.asdf); <span class="comment">// -&gt; 1234</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mapStateToProps</span>(<span class="params">state</span>) </span>&#123; <span class="comment">// state는 BookList, activeBook 배열을 가지고 있다.</span></span><br><span class="line">  <span class="comment">// 반환되는 것들은 Booklist에서 Props를 사용된다. this.props</span></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    books: state.books;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>본문에서 <code>this.props.books</code> 사용하기 위해 <code>books</code> 프로퍼티를 리턴한다.</li><li><code>state.books</code>는 state는 <em>reducer_books.js</em> 에 있는 리턴 배열</li><li><code>connect</code>함수는 이 컴포넌트를 자겨오고 <code>mapStateToProps</code>를 가져와 컨테이너를 반환한다.</li><li><code>mapStateToProps</code>가 react-redux를 연결하는 접착제역할을 한다.</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> connect(mapStateToProps)(BookList);</span><br></pre></td></tr></table></figure><ol><li>state가 바뀔때마다 리 렌더링</li><li><code>connect</code> state 바뀔때마다 반환되는 객체가 <code>this.props</code>로 할당</li></ol><h4 id="구조-및-전체-소스"><a href="#구조-및-전체-소스" class="headerlink" title="구조 및 전체 소스"></a>구조 및 전체 소스</h4><ul><li>containers/book-list.js</li><li>reducers/index.js</li><li>reducers/reducer_books.js</li></ul><p><em>index.js</em></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; combineReducers &#125; <span class="keyword">from</span> <span class="string">'redux'</span>;</span><br><span class="line"><span class="keyword">import</span> booksReducer <span class="keyword">from</span> <span class="string">'./reducer_books'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> rootReducer = combineReducers(&#123;</span><br><span class="line">  books: booksReducer,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> rootReducer;</span><br></pre></td></tr></table></figure><p><em>reducer_books.js</em></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> [</span><br><span class="line">    &#123; <span class="attr">title</span>: <span class="string">'Javascript: The Good Parts'</span>&#125;,</span><br><span class="line">    &#123; <span class="attr">title</span>: <span class="string">'Javascript: ES6'</span>&#125;,</span><br><span class="line">    &#123; <span class="attr">title</span>: <span class="string">'Javascript: React'</span>&#125;,</span><br><span class="line">    &#123; <span class="attr">title</span>: <span class="string">'Javascript: CookBook'</span>&#125;,</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>book-list.js</em></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; connect &#125; <span class="keyword">from</span> <span class="string">'react-redux'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BookList</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  renderList() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.props.books.map(<span class="function">(<span class="params">book</span>) =&gt;</span></span><br><span class="line">      <span class="keyword">return</span> (</span><br><span class="line">        &lt;li key=&#123;book.title&#125; className=<span class="string">"list-group-item"</span>&gt;&#123;book.title&#125;&lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">      );</span></span><br><span class="line"><span class="regexp">    &#125;);</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">  render() &#123;</span></span><br><span class="line"><span class="regexp">    return (</span></span><br><span class="line"><span class="regexp">      &lt;ul className="list-group col-sm-4"&gt;&#123;this.renderList()&#125;&lt;/u</span>l&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mapStateToProps</span>(<span class="params">state</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    books: state.books;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> connect(mapStateToProps)(BookList);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;REACT&quot;&gt;&lt;a href=&quot;#REACT&quot; class=&quot;headerlink&quot; title=&quot;REACT&quot;&gt;&lt;/a&gt;REACT&lt;/h1&gt;&lt;h2 id=&quot;리듀서&quot;&gt;&lt;a href=&quot;#리듀서&quot; class=&quot;headerlink&quot; title=&quot;리듀서&quot;&gt;&lt;/
      
    
    </summary>
    
      <category term="react" scheme="https://shldhee.github.io/categories/react/"/>
    
    
      <category term="react, redux, reducer, container, component, mapStateToProps, connect" scheme="https://shldhee.github.io/tags/react-redux-reducer-container-component-mapStateToProps-connect/"/>
    
  </entry>
  
  <entry>
    <title>Algorithm - Harshad(Level2)</title>
    <link href="https://shldhee.github.io/2017/12/20/algo-5/"/>
    <id>https://shldhee.github.io/2017/12/20/algo-5/</id>
    <published>2017-12-20T07:50:17.000Z</published>
    <updated>2020-07-23T08:31:33.044Z</updated>
    
    <content type="html"><![CDATA[<h1 id="다섯번째-알고리즘"><a href="#다섯번째-알고리즘" class="headerlink" title="다섯번째 알고리즘"></a>다섯번째 알고리즘</h1><h2 id="문제-설명"><a href="#문제-설명" class="headerlink" title="문제 설명"></a>문제 설명</h2><p>양의 정수 x가 하샤드 수이려면 x의 자릿수의 합으로 x가 나누어져야 합니다. 예를들어 18의 자릿수 합은 1+8=9이고, 18은 9로 나누어 떨어지므로 18은 하샤드 수입니다.</p><p>Harshad함수는 양의 정수 n을 매개변수로 입력받습니다. 이 n이 하샤드수인지 아닌지 판단하는 함수를 완성하세요.<br>예를들어 n이 10, 12, 18이면 True를 리턴 11, 13이면 False를 리턴하면 됩니다.</p><h3 id="내-답안"><a href="#내-답안" class="headerlink" title="내 답안"></a>내 답안</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Harshad</span>(<span class="params">n</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> result ;</span><br><span class="line">  <span class="keyword">let</span> numToStringArr = n.toString().split(<span class="string">''</span>);</span><br><span class="line">  <span class="keyword">let</span> sum = numToStringArr.reduce( <span class="function">(<span class="params">p, c</span>) =&gt;</span> <span class="built_in">Number</span>(p) + <span class="built_in">Number</span>(c) );</span><br><span class="line">  n % sum === <span class="number">0</span> ? result = <span class="literal">true</span> : result = <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(Harshad(<span class="number">18</span>));</span><br></pre></td></tr></table></figure><h3 id="리팩토링"><a href="#리팩토링" class="headerlink" title="리팩토링"></a>리팩토링</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Harshad</span>(<span class="params">n</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> result ;</span><br><span class="line">  n % n.toString().split(<span class="string">''</span>).reduce( <span class="function">(<span class="params">p, c</span>) =&gt;</span> (+p) + +(c) ) === <span class="number">0</span> ? result = <span class="literal">true</span> : result = <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="공부할-점"><a href="#공부할-점" class="headerlink" title="공부할 점"></a>공부할 점</h3><h4 id="1-숫자-gt-문자열-변환"><a href="#1-숫자-gt-문자열-변환" class="headerlink" title="1. 숫자 -&gt; 문자열 변환"></a>1. 숫자 -&gt; 문자열 변환</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> n = <span class="number">123</span>;</span><br><span class="line">n + <span class="string">''</span>;</span><br><span class="line">n = <span class="string">'123'</span>;</span><br></pre></td></tr></table></figure><h4 id="2-숫자문자열은-연산자-숫자를-이용해-숫자로-변환이-가능"><a href="#2-숫자문자열은-연산자-숫자를-이용해-숫자로-변환이-가능" class="headerlink" title="2. 숫자문자열은 연산자 숫자를 이용해 숫자로 변환이 가능"></a>2. 숫자문자열은 연산자 숫자를 이용해 숫자로 변환이 가능</h4><ul><li>연산자를 활용해 문자열을 숫자로 변경</li><li>Number(p) + Number(c)를 +p + +c 로 변경 가능</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;다섯번째-알고리즘&quot;&gt;&lt;a href=&quot;#다섯번째-알고리즘&quot; class=&quot;headerlink&quot; title=&quot;다섯번째 알고리즘&quot;&gt;&lt;/a&gt;다섯번째 알고리즘&lt;/h1&gt;&lt;h2 id=&quot;문제-설명&quot;&gt;&lt;a href=&quot;#문제-설명&quot; class=&quot;header
      
    
    </summary>
    
      <category term="Algorithm" scheme="https://shldhee.github.io/categories/Algorithm/"/>
    
    
      <category term="Algorithm" scheme="https://shldhee.github.io/tags/Algorithm/"/>
    
      <category term="Javascript" scheme="https://shldhee.github.io/tags/Javascript/"/>
    
      <category term="JS" scheme="https://shldhee.github.io/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript - Scope, Lexical scoping, Closure</title>
    <link href="https://shldhee.github.io/2017/09/29/closure/"/>
    <id>https://shldhee.github.io/2017/09/29/closure/</id>
    <published>2017-09-29T01:52:45.000Z</published>
    <updated>2020-07-23T08:31:33.044Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Scope"><a href="#Scope" class="headerlink" title="Scope"></a>Scope</h2><blockquote><p>스코프란 현재 접근할 수 있는 변수들의 범위</p></blockquote><ul><li><code>setTimout</code>이 비동기로 작동되어 <code>for</code>문이 모두 마치고서 <code>setTimout</code>이 실행된다.</li><li>예를 들어, <code>for</code>문이 돌때마다 <code>setTimeout</code>은 이벤트 큐에 계속 추가 된다.</li><li><code>for</code>문이 끝난 뒤 이벤트 큐에 있는 <code>setTimeout</code>이 순서대로 실행 된다.(이때 엄청 빠른 속도로 이벤트큐에 쌓인다.)</li><li>이때 <code>setTimeout</code>에는 <code>i</code>값을 갖고 있는데 <code>for</code>문이 다 끝나고 나면 <code>i</code>의 값은 4이므로 4가 출력된다.</li><li>참조 : <a href="https://shldhee.github.io/2017/12/21/javascript-runtime/">자바스크립트-런타임</a></li></ul><p><em>이슈 소스 예제</em></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i);</span><br><span class="line">  &#125;, <span class="number">1000</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// result</span></span><br><span class="line"><span class="comment">// 4</span></span><br><span class="line"><span class="comment">// 4</span></span><br><span class="line"><span class="comment">// 4</span></span><br><span class="line"><span class="comment">// 4</span></span><br></pre></td></tr></table></figure><ul><li><code>i</code>는 글로벌 스코프이고 <code>setTimeout</code>안에 함수 스코프(<code>S</code>라고 한다.)가 <code>for</code>문을 돌때마다 생긴다.</li><li>이때 생기는 <code>S</code>스코프와 글로벌 스코프의 스코프 체인(scope-chain)이 만들어 진다.</li></ul><pre class="mermaid">graph RLA[S scope <br> empty scope] --> D[global scope<br> i = 4]B[S scope <br> empty scope] --> D[global scope<br> i = 4]C[S scope <br> empty scope] --> D[global scope<br> i = 4]E[S scope <br> empty scope] --> D[global scope<br> i = 4]</pre><p><em>수정 코드</em></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">setTimeout((<span class="function"><span class="keyword">function</span>(<span class="params">i</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(i);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)(i), <span class="number">1000</span>)</span><br></pre></td></tr></table></figure><h2 id="어휘적-유효-범위-Lexical-scoping"><a href="#어휘적-유효-범위-Lexical-scoping" class="headerlink" title="어휘적 유효 범위 (Lexical scoping)"></a>어휘적 유효 범위 (Lexical scoping)</h2><ul><li>내부 함수는 외부 함수에 접근할 권한을 가지고 있다. (<code>displayName()</code>는 부모함수 <code>init()</code>에 선언된 변수 <code>name</code>에 접근)</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">init</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> name = <span class="string">"Mozilla"</span>; <span class="comment">// name은 init의 지역변수</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">displayName</span>(<span class="params"></span>) </span>&#123; <span class="comment">// displayName()은 내부 함수, 클로저</span></span><br><span class="line">    alert(name); <span class="comment">// 부모 함수(init())에서 선언된 변수 사용</span></span><br><span class="line">  &#125;</span><br><span class="line">  displayName();</span><br><span class="line">&#125;</span><br><span class="line">init();</span><br></pre></td></tr></table></figure><pre class="mermaid">graph RLA[displayName scope<br>empty scope] --> B[init scope<br> name = 'Mozliia']</pre><h2 id="Closure"><a href="#Closure" class="headerlink" title="Closure"></a>Closure</h2><blockquote><p>“특정 함수가 참조하는 변수들이 선언된 렉시컬 스포트(lexical scope)는 계속 유지되는데, 그 함수와 스코프를 묶어서 클로저라고 한다.”<br>외부함수(포함하고 있는)의 변수에 접근할 수 있는 내부 함수를 일컫습니다.<br>자신의 범위(Scope) 밖에 있는 변수들에 접근할 수 있는 함수를 의미합니다.</p></blockquote><p><em>closure(클로저) 예제</em></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">makeFunc</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> name = <span class="string">"Mozliia"</span>;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">displayName</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(name);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> displayName;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> myFunc = makeFunc();</span><br><span class="line">myFunc();</span><br></pre></td></tr></table></figure><ul><li><code>makeFunc()</code> 실행시 선언될때 스코프 체인을 기억한다.</li></ul><pre class="mermaid">graph RLA[displayName scope<br>empty scope] --> B[makeFunc scope<br> name = 'Mozliia']</pre><ul><li>몇몇의 프로그래밍 언어들은 함수 안의 지역 변수들은 그 함수가 수행되는 기간 동안에만 존재한다.</li><li><code>makeFunc()</code> 실행이 끝나면 <code>name</code>변수에 더 이상 접근할 수 없게 될 것으로 예상하는 것이 합리적이다.</li><li>위 코드는 <code>name</code>변수의 접근이 가능하다.</li><li><strong>그 이유는 자바스크립트의 클로저 때문이다.</strong></li><li>위의 경우, <code>myFunc</code>은 <code>makeFunc</code>이 실행될 때 생성된 <code>displayName</code> 함수의 인스턴스에 대한 참조다.</li></ul><p><em>다른 closure 예제</em></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">makeAdder</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">y</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x + y;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> add5 = makeAdder(<span class="number">5</span>);</span><br><span class="line"><span class="keyword">var</span> add10 = makeAdder(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(add5(<span class="number">2</span>));  <span class="comment">// 7</span></span><br><span class="line"><span class="built_in">console</span>.log(add10(<span class="number">2</span>)); <span class="comment">// 12</span></span><br></pre></td></tr></table></figure><ul><li><code>add5</code>는 <code>makeAdder(5)</code>에서 x = 5의 값을 참조한 상태로 function(y)를 반환 받는다.</li><li><code>add5(2)</code> 실행하면 함수 내용이 x + y는 5 + 2가 되어 7이 나온다.</li><li><code>add5</code>와 <code>add10</code>은 둘 다 클로저다. 이들은 같은 함수 본문 정의를 공유하지만 서로 다른 어휘적 환경을 저장한다. <code>add5</code>의 문법적 환경에서 x는 5이지만 <code>add10</code>의 어휘적 환경에서 x는 10이다.</li></ul><h3 id="결론"><a href="#결론" class="headerlink" title="결론"></a>결론</h3><ul><li>클로저는 여러 곳에서 유용하게 사용된다.<ul><li>반복문, 프라이빗 메소드 및 변수를 비슷하게 만들 수 있다.</li></ul></li><li>초기화 작업이 필요할때, 콜백 함수에 동적인 데이터를 넘겨줄때 클로저를 사용</li><li>단점은, 클로저는 메모리를 소모하고, 스코프 생성과 이후 변수 조회에 따른 퍼포먼스 손해가 있다.</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Scope&quot;&gt;&lt;a href=&quot;#Scope&quot; class=&quot;headerlink&quot; title=&quot;Scope&quot;&gt;&lt;/a&gt;Scope&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;스코프란 현재 접근할 수 있는 변수들의 범위&lt;/p&gt;
&lt;/blockquote&gt;
&lt;u
      
    
    </summary>
    
      <category term="javascript" scheme="https://shldhee.github.io/categories/javascript/"/>
    
    
      <category term="javascript" scheme="https://shldhee.github.io/tags/javascript/"/>
    
      <category term="scope" scheme="https://shldhee.github.io/tags/scope/"/>
    
      <category term="lexical scoping" scheme="https://shldhee.github.io/tags/lexical-scoping/"/>
    
      <category term="closure" scheme="https://shldhee.github.io/tags/closure/"/>
    
      <category term="function" scheme="https://shldhee.github.io/tags/function/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript - var</title>
    <link href="https://shldhee.github.io/2017/09/29/javascript-var/"/>
    <id>https://shldhee.github.io/2017/09/29/javascript-var/</id>
    <published>2017-09-29T00:32:50.000Z</published>
    <updated>2020-07-23T08:31:33.045Z</updated>
    
    <content type="html"><![CDATA[<h1 id="var"><a href="#var" class="headerlink" title="var"></a>var</h1><blockquote><p>변수 선언은 변수, 선택적인 값으로 초기화된 변수를 선언합니다.</p></blockquote><h2 id="설명"><a href="#설명" class="headerlink" title="설명"></a>설명</h2><ul><li>var로 선언된 변수의 범위는 현재 실행 문맥인데, 그 문맥은 둘러싼 함수, 혹은 함수의 외부에 전역으로 선언된 변수도 될 수 있습니다.</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">x</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="string">"local"</span>;</span><br><span class="line">  b = <span class="string">"global"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">x();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br><span class="line"><span class="built_in">console</span>.log(b);</span><br></pre></td></tr></table></figure><ul><li>위와 같이 실행 하면 <code>Uncaught ReferenceError: a is not defined</code> 발생한다.</li><li><code>x()</code> 함수 안에 변수 <code>a</code>는 함수 안에서만 존재한다.</li><li><em>선언된 변수들은 변수가 선언된 실행 콘텍스트(execution context)안에서 만들어지기 때문이다.*</em></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">x</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="string">"local"</span>;</span><br><span class="line">  b = <span class="string">"global"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">x();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(b);</span><br></pre></td></tr></table></figure><ul><li>위와 같이 실행하면 <code>&quot;global&quot;</code> 출력한다.</li><li><em>선언되지 않은 변수들은 항상 전역변수이다.*</em></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(a);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"still going..."</span>);</span><br></pre></td></tr></table></figure><ul><li><code>ReferenceError: a is not defined</code> 출력</li><li><em>선언되지 않은 변수들은 변수들을 할당하는 코드<code>(ex a = 0;)</code>가 실행되기 전까지는 존재하지 않는다.*</em></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a;</span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"still going..."</span>);</span><br></pre></td></tr></table></figure><ul><li><p><code>undefined</code></p></li><li><p><code>&quot;still going...&quot;</code> 출력</p></li><li><p><code>undefined</code>는 만들어졌지만 초기화 할당이 되지 않은 상태</p></li><li><p><em>선언된 변수들은 어떠한 코드가 실행되기 전에 만들어집니다.*</em></p></li></ul><p><em>ECMAScript 5 안에 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode" rel="external nofollow noopener noreferrer" target="_blank">strict mode</a>, 선언되지 않은 변수에 할당하면 오류를 출력합니다.</em></p><h3 id="var-호이스팅-hoisting"><a href="#var-호이스팅-hoisting" class="headerlink" title="var 호이스팅(hoisting)"></a>var 호이스팅(hoisting)</h3><blockquote><p>위에 말했듯이 변수 선언들은 코드가 실행 되기 전에 처리된다.<br>따라서, 코드 안 어디서든 변수 선언은 최상위에 선언한것과 동등하다.<br>즉, 변수가 선언되기전에 사용될 수 있다는것을 위미합니다.</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hoisting = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> hoisting;</span><br><span class="line"><span class="built_in">console</span>.log(hoisting);</span><br></pre></td></tr></table></figure><ul><li>위 코드는 아래처럼 작동된다.</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> hoisting;</span><br><span class="line">hoisting = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">console</span>.log(hoisting);</span><br></pre></td></tr></table></figure><h4 id="요약"><a href="#요약" class="headerlink" title="요약"></a>요약</h4><ul><li>var를 사용한 선언된 변수는 현재 실행 문맥 즉, 실행 컨텍스트(execution context)에서 만들어져 그 안에서만 사용이 가능하다.</li><li>var를 사용하지 않은 변수는 지역 변수로 선언된다.</li><li>var 호이스팅(변수 선언들은 코드가 실행되기 전에 처리된다. 즉, 변수가 선언되기전에 사용될 수 있다는것을 의미한다.)</li><li>var를 사용하는 것이 좋고, 최상단에 선언하는 것이 좋다.</li></ul><p>참조 : <a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Statements/var" rel="external nofollow noopener noreferrer" target="_blank">mdn</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;var&quot;&gt;&lt;a href=&quot;#var&quot; class=&quot;headerlink&quot; title=&quot;var&quot;&gt;&lt;/a&gt;var&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;변수 선언은 변수, 선택적인 값으로 초기화된 변수를 선언합니다.&lt;/p&gt;
&lt;/blockquote&gt;
      
    
    </summary>
    
      <category term="javascript" scheme="https://shldhee.github.io/categories/javascript/"/>
    
    
      <category term="javascript" scheme="https://shldhee.github.io/tags/javascript/"/>
    
      <category term="var" scheme="https://shldhee.github.io/tags/var/"/>
    
      <category term="hoisting" scheme="https://shldhee.github.io/tags/hoisting/"/>
    
  </entry>
  
  <entry>
    <title>Algorithm - getMinSum(Level2)</title>
    <link href="https://shldhee.github.io/2017/08/11/algo-4/"/>
    <id>https://shldhee.github.io/2017/08/11/algo-4/</id>
    <published>2017-08-11T08:07:51.000Z</published>
    <updated>2020-07-23T08:31:33.044Z</updated>
    
    <content type="html"><![CDATA[<h1 id="네-번째-알고리즘"><a href="#네-번째-알고리즘" class="headerlink" title="네 번째 알고리즘"></a>네 번째 알고리즘</h1><h2 id="문제-설명"><a href="#문제-설명" class="headerlink" title="문제 설명"></a>문제 설명</h2><p>최솟값 만들기<br>자연수로 이루어진 길이가 같은 수열 A,B가 있습니다. 최솟값 만들기는 A, B에서 각각 한 개의 숫자를 뽑아 두 수를 곱한 값을 누적하여 더합니다. 이러한 과정을 수열의 길이만큼 반복하여 최종적으로 누적된 값이 최소가 되도록 만드는 것이 목표입니다.</p><p>예를 들어 A = [1, 2] , B = [3, 4] 라면</p><ol><li>A에서 1, B에서 4를 뽑아 곱하여 더합니다.</li><li>A에서 2, B에서 3을 뽑아 곱하여 더합니다.</li></ol><p>수열의 길이만큼 반복하여 최솟값 10을 얻을 수 있으며, 이 10이 최솟값이 됩니다.<br>수열 A,B가 주어질 때, 최솟값을 반환해주는 getMinSum 함수를 완성하세요.</p><h3 id="내-답안"><a href="#내-답안" class="headerlink" title="내 답안"></a>내 답안</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getMinSum</span>(<span class="params">A,B</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> answer = <span class="number">0</span>;</span><br><span class="line">  A.sort(<span class="function">(<span class="params">a,b</span>) =&gt;</span> a-b);</span><br><span class="line">  B.sort(<span class="function">(<span class="params">a,b</span>) =&gt;</span> b-a);</span><br><span class="line">  answer = A.map( <span class="function">(<span class="params">v,i</span>) =&gt;</span> v * B[i]).reduce(<span class="function">(<span class="params">p, c</span>) =&gt;</span> p+c);</span><br><span class="line">  <span class="keyword">return</span> answer;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//아래 코드는 테스트를 위한 출력 코드 입니다.</span></span><br><span class="line"><span class="keyword">var</span> tA = [<span class="number">1</span>,<span class="number">2</span>],</span><br><span class="line">    tB = [<span class="number">3</span>,<span class="number">4</span>];</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(getMinSum(tA,tB));</span><br></pre></td></tr></table></figure><h3 id="다른-사람-답안"><a href="#다른-사람-답안" class="headerlink" title="다른 사람 답안"></a>다른 사람 답안</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getMinSum</span>(<span class="params">A,B</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> answer = [];</span><br><span class="line"></span><br><span class="line">  B.reverse();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;A.length;i++)&#123;</span><br><span class="line">        answer.push(A[i]*B[i]);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  answer = answer.reduce(func_answer,<span class="number">0</span>);</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">func_answer</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a+b;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> answer;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//아래 코드는 테스트를 위한 출력 코드 입니다.</span></span><br><span class="line"><span class="keyword">var</span> tA = [<span class="number">1</span>,<span class="number">2</span>],</span><br><span class="line">    tB = [<span class="number">3</span>,<span class="number">4</span>];</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(getMinSum(tA,tB));</span><br></pre></td></tr></table></figure><h3 id="공부할-점"><a href="#공부할-점" class="headerlink" title="공부할 점"></a>공부할 점</h3><h4 id="1-sort"><a href="#1-sort" class="headerlink" title="1. sort"></a>1. sort</h4><ul><li>a-b 오름차순 b-a 내림차순</li></ul><h4 id="2-reduce-공부"><a href="#2-reduce-공부" class="headerlink" title="2. reduce 공부"></a>2. reduce 공부</h4><h4 id="3-reverse"><a href="#3-reverse" class="headerlink" title="3. reverse"></a>3. reverse</h4>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;네-번째-알고리즘&quot;&gt;&lt;a href=&quot;#네-번째-알고리즘&quot; class=&quot;headerlink&quot; title=&quot;네 번째 알고리즘&quot;&gt;&lt;/a&gt;네 번째 알고리즘&lt;/h1&gt;&lt;h2 id=&quot;문제-설명&quot;&gt;&lt;a href=&quot;#문제-설명&quot; class=&quot;header
      
    
    </summary>
    
      <category term="Algorithm" scheme="https://shldhee.github.io/categories/Algorithm/"/>
    
    
      <category term="Algorithm" scheme="https://shldhee.github.io/tags/Algorithm/"/>
    
      <category term="Javascript" scheme="https://shldhee.github.io/tags/Javascript/"/>
    
      <category term="JS" scheme="https://shldhee.github.io/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>Algorithm - getDayName(Level2)</title>
    <link href="https://shldhee.github.io/2017/07/31/algo-3/"/>
    <id>https://shldhee.github.io/2017/07/31/algo-3/</id>
    <published>2017-07-31T14:17:40.000Z</published>
    <updated>2020-07-23T08:31:33.044Z</updated>
    
    <content type="html"><![CDATA[<h1 id="세번째-알고리즘"><a href="#세번째-알고리즘" class="headerlink" title="세번째 알고리즘"></a>세번째 알고리즘</h1><h2 id="문제-설명"><a href="#문제-설명" class="headerlink" title="문제 설명"></a>문제 설명</h2><p>2016년<br>2016년 1월 1일은 금요일입니다. 2016년 A월 B일은 무슨 요일일까요? 두 수 A,B를 입력받아 A월 B일이 무슨 요일인지 출력하는 getDayName 함수를 완성하세요. 요일의 이름은 일요일부터 토요일까지 각각</p><p>SUN,MON,TUE,WED,THU,FRI,SAT</p><p>를 출력해주면 됩니다. 예를 들어 A=5, B=24가 입력된다면 5월 24일은 화요일이므로 TUE를 반환하면 됩니다.</p><h3 id="내-답안"><a href="#내-답안" class="headerlink" title="내 답안"></a>내 답안</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getDayName</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line"> <span class="keyword">var</span> answer = <span class="string">""</span>;</span><br><span class="line"> <span class="keyword">var</span> agoDate = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">2016</span>,<span class="number">0</span>,<span class="number">1</span>);</span><br><span class="line"> <span class="keyword">var</span> newDate = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">2016</span>,a<span class="number">-1</span>,b); <span class="comment">// a-1 은 0이 1월 11이 12월이므로</span></span><br><span class="line"> <span class="built_in">console</span>.log(newDate);</span><br><span class="line"> <span class="keyword">var</span> result = (newDate-agoDate)/<span class="number">86400000</span>%<span class="number">7</span>; <span class="comment">// 하루 86400000초</span></span><br><span class="line"> <span class="keyword">var</span> result1 = <span class="built_in">console</span>.log((newDate-agoDate)/<span class="number">86400000</span>);</span><br><span class="line"> <span class="keyword">var</span> result2 = <span class="built_in">console</span>.log(result1%<span class="number">7</span>);</span><br><span class="line"> <span class="built_in">console</span>.log(result);</span><br><span class="line"> <span class="keyword">switch</span> (result) &#123;</span><br><span class="line"> <span class="keyword">case</span> <span class="number">0</span>: <span class="keyword">return</span> <span class="string">"FRI"</span>;</span><br><span class="line"> <span class="keyword">break</span>;</span><br><span class="line"> <span class="keyword">case</span> <span class="number">1</span>: <span class="keyword">return</span> <span class="string">"SAT"</span>;</span><br><span class="line"> <span class="keyword">break</span>;</span><br><span class="line"> <span class="keyword">case</span> <span class="number">2</span>: <span class="keyword">return</span> <span class="string">"SUN"</span>;</span><br><span class="line"> <span class="keyword">break</span>;</span><br><span class="line"> <span class="keyword">case</span> <span class="number">3</span>: <span class="keyword">return</span> <span class="string">"MON"</span>;</span><br><span class="line"> <span class="keyword">break</span>;</span><br><span class="line"> <span class="keyword">case</span> <span class="number">4</span>: <span class="keyword">return</span> <span class="string">"TUE"</span>;</span><br><span class="line"> <span class="keyword">break</span>;</span><br><span class="line"> <span class="keyword">case</span> <span class="number">5</span>: <span class="keyword">return</span> <span class="string">"WED"</span>;</span><br><span class="line"> <span class="keyword">break</span>;</span><br><span class="line"> <span class="keyword">case</span> <span class="number">6</span>: <span class="keyword">return</span> <span class="string">"THU"</span>;</span><br><span class="line"> <span class="keyword">break</span>;</span><br><span class="line"> <span class="keyword">default</span>: <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"이거 실행되면 안댕"</span>);</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h3 id="다른-사람-답안"><a href="#다른-사람-답안" class="headerlink" title="다른 사람 답안"></a>다른 사람 답안</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getDayName</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> answer = <span class="string">""</span>;</span><br><span class="line">answer = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">2016</span>,a<span class="number">-1</span>,b).toString.slice(<span class="number">0</span>,<span class="number">3</span>);</span><br><span class="line"><span class="keyword">return</span> answer;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(getDayName(<span class="number">2</span>,<span class="number">9</span>));</span><br></pre></td></tr></table></figure><h3 id="공부할-점"><a href="#공부할-점" class="headerlink" title="공부할 점"></a>공부할 점</h3><h4 id="1-2016-1-1원래-금요일이므로"><a href="#1-2016-1-1원래-금요일이므로" class="headerlink" title="1. 2016-1-1원래 금요일이므로"></a>1. 2016-1-1원래 금요일이므로</h4><pre><code>- agoDate를 구할 필요가 없음</code></pre><h4 id="2-간단하게-toString을-이용하여-푼다"><a href="#2-간단하게-toString을-이용하여-푼다" class="headerlink" title="2. 간단하게 toString을 이용하여 푼다."></a>2. 간단하게 <code>toString</code>을 이용하여 푼다.</h4>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;세번째-알고리즘&quot;&gt;&lt;a href=&quot;#세번째-알고리즘&quot; class=&quot;headerlink&quot; title=&quot;세번째 알고리즘&quot;&gt;&lt;/a&gt;세번째 알고리즘&lt;/h1&gt;&lt;h2 id=&quot;문제-설명&quot;&gt;&lt;a href=&quot;#문제-설명&quot; class=&quot;headerlink
      
    
    </summary>
    
      <category term="Algorithm" scheme="https://shldhee.github.io/categories/Algorithm/"/>
    
    
      <category term="Algorithm" scheme="https://shldhee.github.io/tags/Algorithm/"/>
    
      <category term="Javascript" scheme="https://shldhee.github.io/tags/Javascript/"/>
    
      <category term="JS" scheme="https://shldhee.github.io/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>Algorithm - adder(Level2)</title>
    <link href="https://shldhee.github.io/2017/07/29/algo-2/"/>
    <id>https://shldhee.github.io/2017/07/29/algo-2/</id>
    <published>2017-07-28T15:54:55.000Z</published>
    <updated>2020-07-23T08:31:33.044Z</updated>
    
    <content type="html"><![CDATA[<h1 id="두번째-알고리즘"><a href="#두번째-알고리즘" class="headerlink" title="두번째 알고리즘"></a>두번째 알고리즘</h1><h2 id="문제-설명"><a href="#문제-설명" class="headerlink" title="문제 설명"></a>문제 설명</h2><p>adder함수는 정수 a, b를 매개변수로 입력받습니다.<br>두 수와 두 수 사이에 있는 모든 정수를 더해서 리턴하도록 함수를 완성하세요. a와 b가 같은 경우는 둘 중 아무 수나 리턴하세요.<br>예를들어 a가 3, b가 5이면 12를 리턴하면 됩니다.</p><p>a, b는 음수나 0, 양수일 수 있으며 둘의 대소 관계도 정해져 있지 않습니다.</p><h3 id="답안"><a href="#답안" class="headerlink" title="답안"></a>답안</h3><h4 id="내-답안"><a href="#내-답안" class="headerlink" title="내 답안"></a>내 답안</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">adder</span>(<span class="params">a, b</span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> result = <span class="number">0</span></span><br><span class="line"><span class="comment">//함수를 완성하세요</span></span><br><span class="line"><span class="keyword">if</span>(a === b) <span class="keyword">return</span> result = a;</span><br><span class="line"><span class="keyword">if</span>(a &gt; b) &#123;</span><br><span class="line"><span class="keyword">var</span> temp = a;</span><br><span class="line">a = b;</span><br><span class="line">b = temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(a &lt; b) &#123;</span><br><span class="line"><span class="keyword">for</span>(a; a &lt;= b; a++ ) &#123;</span><br><span class="line">result += a;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 아래는 테스트로 출력해 보기 위한 코드입니다.</span></span><br><span class="line"><span class="built_in">console</span>.log( adder(<span class="number">3</span>, <span class="number">5</span>) )</span><br></pre></td></tr></table></figure><h4 id="수정용-답안-다른-사람-참고"><a href="#수정용-답안-다른-사람-참고" class="headerlink" title="수정용 답안(다른 사람 참고)"></a>수정용 답안(다른 사람 참고)</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">adder</span>(<span class="params">a, b</span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> result = <span class="number">0</span></span><br><span class="line"><span class="comment">//함수를 완성하세요</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="built_in">Math</span>.min(a,b); i &lt;= <span class="built_in">Math</span>.max(a,b); i++) &#123;</span><br><span class="line">result += i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 아래는 테스트로 출력해 보기 위한 코드입니다.</span></span><br><span class="line"><span class="built_in">console</span>.log( adder(<span class="number">3</span>, <span class="number">5</span>) )</span><br></pre></td></tr></table></figure><h3 id="공부할-점"><a href="#공부할-점" class="headerlink" title="공부할 점"></a>공부할 점</h3><h4 id="1-Math-max-Math-min-활용"><a href="#1-Math-max-Math-min-활용" class="headerlink" title="1. Math.max,Math.min 활용"></a>1. <code>Math.max,Math.min</code> 활용</h4><p><code>Math.min</code>으로 두 정수 중 최솟값 찾기<br><code>Math.max</code>으로 두 정수 중 최대값 찾기</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;두번째-알고리즘&quot;&gt;&lt;a href=&quot;#두번째-알고리즘&quot; class=&quot;headerlink&quot; title=&quot;두번째 알고리즘&quot;&gt;&lt;/a&gt;두번째 알고리즘&lt;/h1&gt;&lt;h2 id=&quot;문제-설명&quot;&gt;&lt;a href=&quot;#문제-설명&quot; class=&quot;headerlink
      
    
    </summary>
    
      <category term="Algorithm" scheme="https://shldhee.github.io/categories/Algorithm/"/>
    
    
      <category term="Algorithm" scheme="https://shldhee.github.io/tags/Algorithm/"/>
    
      <category term="Javascript" scheme="https://shldhee.github.io/tags/Javascript/"/>
    
      <category term="JS" scheme="https://shldhee.github.io/tags/JS/"/>
    
  </entry>
  
</feed>
